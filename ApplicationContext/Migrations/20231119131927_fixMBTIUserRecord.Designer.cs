// <auto-generated />
using System;
using ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApplicationContext.Migrations
{
    [DbContext(typeof(HighSchoolQuestContext))]
    [Migration("20231119131927_fixMBTIUserRecord")]
    partial class fixMBTIUserRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttempType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attempts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            AttempType = 0,
                            CreatedDate = new DateTime(2023, 11, 19, 13, 19, 26, 948, DateTimeKind.Utc).AddTicks(8952),
                            ExamDate = new DateTime(2023, 11, 20, 13, 19, 26, 948, DateTimeKind.Utc).AddTicks(8957),
                            IsDeleted = false,
                            Name = "bai kiem tra kien thuc xa hoi",
                            Result = "Pass",
                            Score = 10,
                            UserId = new Guid("f0b84747-fbed-43e1-9cd1-ecf2e1bd3cc0")
                        });
                });

            modelBuilder.Entity("Domain.Models.AttemptDetail", b =>
                {
                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExaminationQuestionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAnswered")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AttemptId", "ExaminationQuestionId");

                    b.HasIndex("ExaminationQuestionId");

                    b.ToTable("AttemptDetails");

                    b.HasData(
                        new
                        {
                            AttemptId = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            ExaminationQuestionId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsCorrect = true,
                            UserAnswered = "Paris"
                        },
                        new
                        {
                            AttemptId = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            ExaminationQuestionId = new Guid("046b0f97-130a-48c7-b1ad-40033ae41fff"),
                            IsCorrect = true,
                            UserAnswered = "7"
                        },
                        new
                        {
                            AttemptId = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            ExaminationQuestionId = new Guid("2339983b-33db-4333-9b1b-a5514faa280a"),
                            IsCorrect = true,
                            UserAnswered = "1776-07-04"
                        },
                        new
                        {
                            AttemptId = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            ExaminationQuestionId = new Guid("139c3a57-af40-4c80-96fc-508957db3780"),
                            IsCorrect = true,
                            UserAnswered = "London"
                        });
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float?>("RequiredScore")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de305d54-75b4-431b-adb2-eb6b9e546013"),
                            Code = "SE",
                            Description = "các ngành về máy tính",
                            IsDeleted = false,
                            Name = "Công nghệ thông tin",
                            RequiredScore = 22f
                        },
                        new
                        {
                            Id = new Guid("b8034210-23fd-4af9-9d7f-f260a0cdef97"),
                            Code = "KT",
                            Description = "các ngành về kinh tế",
                            IsDeleted = false,
                            Name = "Kinh tế",
                            RequiredScore = 22f
                        },
                        new
                        {
                            Id = new Guid("4c7c3b5f-2a54-42ee-8a7f-0961273cd329"),
                            Code = "YH",
                            Description = "Các ngành y dược",
                            IsDeleted = false,
                            Name = "Y học",
                            RequiredScore = 27f
                        },
                        new
                        {
                            Id = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            Code = "SP",
                            Description = "Các ngành sư phạm",
                            IsDeleted = false,
                            Name = "Sư phạm",
                            RequiredScore = 25f
                        },
                        new
                        {
                            Id = new Guid("bb3a10db-c4d4-4b45-9d15-0c38f41e8f5f"),
                            Code = "TK",
                            Description = "Các ngành thiết kế/nghệ thuật",
                            IsDeleted = false,
                            Name = "Thiết kế",
                            RequiredScore = 22f
                        },
                        new
                        {
                            Id = new Guid("67d181a2-ac85-4aaa-bcad-863b8695071b"),
                            Code = "LAW",
                            Description = "Các ngành về luật",
                            IsDeleted = false,
                            Name = "Luật",
                            RequiredScore = 23f
                        },
                        new
                        {
                            Id = new Guid("f9cf3140-b872-4837-b965-d37f94e33c0b"),
                            Code = "TT",
                            Description = "Các ngành về báo chí/truyền thông",
                            IsDeleted = false,
                            Name = "Truyền Thông",
                            RequiredScore = 24f
                        },
                        new
                        {
                            Id = new Guid("5fbe7741-917c-45f5-8f78-c06327ede146"),
                            Code = "NN",
                            Description = "Các ngành về ngôn ngữ",
                            IsDeleted = false,
                            Name = "Ngôn Ngữ",
                            RequiredScore = 22f
                        });
                });

            modelBuilder.Entity("Domain.Models.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalNumberOfQuestion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Examinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            Description = "de thi toan",
                            IsDeleted = false,
                            Name = "de toan",
                            TotalNumberOfQuestion = 4
                        },
                        new
                        {
                            Id = new Guid("1e157ceb-9adb-48bf-84de-ae050c2f89b8"),
                            Description = "De thi hoa hoc",
                            IsDeleted = false,
                            Name = "de hoa",
                            TotalNumberOfQuestion = 20
                        },
                        new
                        {
                            Id = new Guid("e296dd9b-4007-4666-b6fe-35664dcaed77"),
                            Description = "De thi sinh hoc",
                            IsDeleted = false,
                            Name = "de sinh",
                            TotalNumberOfQuestion = 21
                        },
                        new
                        {
                            Id = new Guid("80b9fa50-f8aa-4bc5-bf05-39e8f54f8f06"),
                            Description = "De thi van",
                            IsDeleted = false,
                            Name = "de van",
                            TotalNumberOfQuestion = 5
                        },
                        new
                        {
                            Id = new Guid("61bb287c-ea61-47ec-883d-628ed98bb716"),
                            Description = "De thi am nhac",
                            IsDeleted = false,
                            Name = "de music",
                            TotalNumberOfQuestion = 10
                        });
                });

            modelBuilder.Entity("Domain.Models.ExaminationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExaminationQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            ExaminationId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsDeleted = false,
                            QuestionId = new Guid("238f27e2-fe56-4ce8-88f8-d3aa7b56f976")
                        },
                        new
                        {
                            Id = new Guid("046b0f97-130a-48c7-b1ad-40033ae41fff"),
                            ExaminationId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsDeleted = false,
                            QuestionId = new Guid("85e5d51b-16c7-4d0d-8f40-766a6a902698")
                        },
                        new
                        {
                            Id = new Guid("2339983b-33db-4333-9b1b-a5514faa280a"),
                            ExaminationId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsDeleted = false,
                            QuestionId = new Guid("3e28911a-1220-4c7f-a1c6-bcce0b74ccfe")
                        },
                        new
                        {
                            Id = new Guid("139c3a57-af40-4c80-96fc-508957db3780"),
                            ExaminationId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsDeleted = false,
                            QuestionId = new Guid("21eb2451-53ac-44f6-9a6c-751d394a8936")
                        });
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1"),
                            Code = "GroupA",
                            Description = "Khối A",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("632ba05a-9ed9-4a00-9ac8-e1c642919806"),
                            Code = "GroupB",
                            Description = "Khối B",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("dab75dab-d28c-45ad-98a6-b3f25dec3ad0"),
                            Code = "GroupC",
                            Description = "Khối C",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf"),
                            Code = "GroupD",
                            Description = "Khối D",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("20bbb66d-3117-4050-ae30-4caf85831530"),
                            Code = "GroupH",
                            Description = "Khối H",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b8de514a-7bba-4b8b-bae1-fc36c07ed52b"),
                            Code = "GroupV",
                            Description = "Khối V",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Models.GroupDepartment", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupDepartments");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("de305d54-75b4-431b-adb2-eb6b9e546013"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("de305d54-75b4-431b-adb2-eb6b9e546013"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("5fbe7741-917c-45f5-8f78-c06327ede146"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("b8034210-23fd-4af9-9d7f-f260a0cdef97"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("b8034210-23fd-4af9-9d7f-f260a0cdef97"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("4c7c3b5f-2a54-42ee-8a7f-0961273cd329"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("4c7c3b5f-2a54-42ee-8a7f-0961273cd329"),
                            GroupId = new Guid("632ba05a-9ed9-4a00-9ac8-e1c642919806")
                        },
                        new
                        {
                            DepartmentId = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            GroupId = new Guid("632ba05a-9ed9-4a00-9ac8-e1c642919806")
                        },
                        new
                        {
                            DepartmentId = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            GroupId = new Guid("dab75dab-d28c-45ad-98a6-b3f25dec3ad0")
                        },
                        new
                        {
                            DepartmentId = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("bb3a10db-c4d4-4b45-9d15-0c38f41e8f5f"),
                            GroupId = new Guid("20bbb66d-3117-4050-ae30-4caf85831530")
                        },
                        new
                        {
                            DepartmentId = new Guid("bb3a10db-c4d4-4b45-9d15-0c38f41e8f5f"),
                            GroupId = new Guid("b8de514a-7bba-4b8b-bae1-fc36c07ed52b")
                        },
                        new
                        {
                            DepartmentId = new Guid("67d181a2-ac85-4aaa-bcad-863b8695071b"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("67d181a2-ac85-4aaa-bcad-863b8695071b"),
                            GroupId = new Guid("dab75dab-d28c-45ad-98a6-b3f25dec3ad0")
                        },
                        new
                        {
                            DepartmentId = new Guid("67d181a2-ac85-4aaa-bcad-863b8695071b"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("f9cf3140-b872-4837-b965-d37f94e33c0b"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("f9cf3140-b872-4837-b965-d37f94e33c0b"),
                            GroupId = new Guid("dab75dab-d28c-45ad-98a6-b3f25dec3ad0")
                        },
                        new
                        {
                            DepartmentId = new Guid("f9cf3140-b872-4837-b965-d37f94e33c0b"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        });
                });

            modelBuilder.Entity("Domain.Models.MBTI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MBTI");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "INTJ",
                            Description = "Imaginative and strategic thinkers, with a plan for everything.",
                            Name = "The Architect"
                        },
                        new
                        {
                            Id = 2,
                            Code = "INTP",
                            Description = "Innovative inventors with an unquenchable thirst for knowledge.",
                            Name = "The Logician"
                        },
                        new
                        {
                            Id = 3,
                            Code = "ENTJ",
                            Description = "Bold, imaginative and strong-willed leaders, always finding a way – or making one.",
                            Name = "The Commander"
                        },
                        new
                        {
                            Id = 4,
                            Code = "ENTP",
                            Description = "Smart and curious thinkers who cannot resist an intellectual challenge.",
                            Name = "The Debater"
                        },
                        new
                        {
                            Id = 5,
                            Code = "INFJ",
                            Description = "Quiet and mystical, yet very inspiring and tireless idealists.",
                            Name = "The Advocate"
                        },
                        new
                        {
                            Id = 6,
                            Code = "INFP",
                            Description = "Poetic, kind and altruistic people, always eager to help a good cause.",
                            Name = "The Mediator"
                        },
                        new
                        {
                            Id = 7,
                            Code = "ENFJ",
                            Description = "Charismatic and inspiring leaders, able to mesmerize their listeners.",
                            Name = "The Protagonist"
                        },
                        new
                        {
                            Id = 8,
                            Code = "ENFP",
                            Description = "Enthusiastic, creative and sociable free spirits, who can always find a reason to smile.",
                            Name = "The Campaigner"
                        },
                        new
                        {
                            Id = 9,
                            Code = "ISTJ",
                            Description = "Practical and fact-minded individuals, whose reliability cannot be doubted.",
                            Name = "The Logistician"
                        },
                        new
                        {
                            Id = 10,
                            Code = "ISFJ",
                            Description = "Very dedicated and warm protectors, always ready to defend their loved ones.",
                            Name = "The Defender"
                        },
                        new
                        {
                            Id = 11,
                            Code = "ESTJ",
                            Description = "Excellent administrators, unsurpassed at managing things – or people.",
                            Name = "The Executive"
                        },
                        new
                        {
                            Id = 12,
                            Code = "ESFJ",
                            Description = "Extraordinarily caring, social and popular people, always eager to help.",
                            Name = "The Consul"
                        },
                        new
                        {
                            Id = 13,
                            Code = "ISTP",
                            Description = "Bold and practical experimenters, masters of all kinds of tools.",
                            Name = "The Virtuoso"
                        },
                        new
                        {
                            Id = 14,
                            Code = "ISFP",
                            Description = "Flexible and charming artists, always ready to explore and experience something new.",
                            Name = "The Adventurer"
                        },
                        new
                        {
                            Id = 15,
                            Code = "ESTP",
                            Description = "Smart, energetic and very perceptive people, who truly enjoy living on the edge.",
                            Name = "The Entrepreneur"
                        },
                        new
                        {
                            Id = 16,
                            Code = "ESFP",
                            Description = "Spontaneous, energetic and enthusiastic people – life is never boring around them.",
                            Name = "The Entertainer"
                        });
                });

            modelBuilder.Entity("Domain.Models.MBTI_Department", b =>
                {
                    b.Property<int>("MBTI_Id")
                        .HasColumnType("integer");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.HasKey("MBTI_Id", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MBTI_Department");

                    b.HasData(
                        new
                        {
                            MBTI_Id = 2,
                            DepartmentId = new Guid("de305d54-75b4-431b-adb2-eb6b9e546013")
                        },
                        new
                        {
                            MBTI_Id = 2,
                            DepartmentId = new Guid("bb3a10db-c4d4-4b45-9d15-0c38f41e8f5f")
                        },
                        new
                        {
                            MBTI_Id = 9,
                            DepartmentId = new Guid("4c7c3b5f-2a54-42ee-8a7f-0961273cd329")
                        });
                });

            modelBuilder.Entity("Domain.Models.MBTI_Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MBTI_Exams");
                });

            modelBuilder.Entity("Domain.Models.MBTI_ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("MBTI_ExamQuestions");
                });

            modelBuilder.Entity("Domain.Models.MBTI_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("FirstAnswerType")
                        .HasColumnType("integer");

                    b.Property<string>("NameAns1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameAns2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameQuestion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SecondAnswerType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MBTI_Questions");
                });

            modelBuilder.Entity("Domain.Models.MBTI_UserRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MBTI_UserRecords");
                });

            modelBuilder.Entity("Domain.Models.Major", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Major");
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("238f27e2-fe56-4ce8-88f8-d3aa7b56f976"),
                            Content = "{\"Question\":\"What is the capital of France?\",\"ListAnswer\":[{\"Value\":\"Paris\",\"IsAnswer\":true},{\"Value\":\"London\",\"IsAnswer\":false},{\"Value\":\"Berlin\",\"IsAnswer\":false}]}",
                            IsDeleted = false,
                            TopicId = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da")
                        },
                        new
                        {
                            Id = new Guid("85e5d51b-16c7-4d0d-8f40-766a6a902698"),
                            Content = "{\"Question\":\"How many continents are there?\",\"ListAnswer\":[{\"Value\":\"7\",\"IsAnswer\":true},{\"Value\":\"5\",\"IsAnswer\":false},{\"Value\":\"6\",\"IsAnswer\":false}]}",
                            IsDeleted = false,
                            TopicId = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da")
                        },
                        new
                        {
                            Id = new Guid("3e28911a-1220-4c7f-a1c6-bcce0b74ccfe"),
                            Content = "{\"Question\":\"When was the Declaration of Independence signed?\",\"ListAnswer\":[{\"Value\":\"1776-07-04\",\"IsAnswer\":true},{\"Value\":\"1789-09-25\",\"IsAnswer\":false},{\"Value\":\"1800-03-12\",\"IsAnswer\":false}]}",
                            IsDeleted = false,
                            TopicId = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da")
                        },
                        new
                        {
                            Id = new Guid("21eb2451-53ac-44f6-9a6c-751d394a8936"),
                            Content = "{\"Question\":\"Which cities are in the United Kingdom?\",\"ListAnswer\":[{\"Value\":\"London\",\"IsAnswer\":true},{\"Value\":\"Manchester\",\"IsAnswer\":false},{\"Value\":\"Edinburgh\",\"IsAnswer\":true}]}",
                            IsDeleted = false,
                            TopicId = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da")
                        });
                });

            modelBuilder.Entity("Domain.Models.RecordDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MBTI_ExamQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("UserChoice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRecordId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MBTI_ExamQuestionId");

                    b.HasIndex("UserRecordId");

                    b.ToTable("RecordDetails");
                });

            modelBuilder.Entity("Domain.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a8c8d5f-2a54-42ee-8a7f-0961273cd625"),
                            IsDeleted = false,
                            Name = "Toán"
                        },
                        new
                        {
                            Id = new Guid("c0456f7f-1963-4598-8b7c-8f44bd7e2dbe"),
                            IsDeleted = false,
                            Name = "Ngữ Văn"
                        },
                        new
                        {
                            Id = new Guid("d6d7fa5b-6578-46c3-bcd4-98c43d6d709c"),
                            IsDeleted = false,
                            Name = "Anh Văn"
                        },
                        new
                        {
                            Id = new Guid("ffb7d37a-a980-4623-ad89-0c1e0a7de7de"),
                            IsDeleted = false,
                            Name = "Lịch Sử"
                        },
                        new
                        {
                            Id = new Guid("4cb41deb-15d9-40ba-9d20-1f3f10410cc7"),
                            IsDeleted = false,
                            Name = "Địa Lý"
                        },
                        new
                        {
                            Id = new Guid("af6197e1-8fc6-4afe-9f63-6b4f426ad502"),
                            IsDeleted = false,
                            Name = "Sinh học"
                        },
                        new
                        {
                            Id = new Guid("0141a511-2028-4a5a-b81d-4a61d98ee0a8"),
                            IsDeleted = false,
                            Name = "Hóa học"
                        },
                        new
                        {
                            Id = new Guid("00940497-7f82-493d-aac3-a56e9e92f390"),
                            IsDeleted = false,
                            Name = "Giáo dục công dân"
                        },
                        new
                        {
                            Id = new Guid("ab091cc2-6f9a-4023-8003-2ca82076f5a4"),
                            IsDeleted = false,
                            Name = "Vật Lý"
                        },
                        new
                        {
                            Id = new Guid("50051095-391a-4abf-94f2-ac3cf912f07b"),
                            IsDeleted = false,
                            Name = "Mỹ Thuật"
                        });
                });

            modelBuilder.Entity("Domain.Models.SubjectGroup", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("SubjectGroup");
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da"),
                            Description = "toan dai cuong",
                            Index = 1,
                            IsDeleted = false,
                            Name = "toan dai cuong",
                            SubjectId = new Guid("6a8c8d5f-2a54-42ee-8a7f-0961273cd625")
                        },
                        new
                        {
                            Id = new Guid("25b3ba1e-240a-4a3c-96b6-c0816b0a3975"),
                            Description = "Toan hinh",
                            Index = 2,
                            IsDeleted = false,
                            Name = "toan hinh",
                            SubjectId = new Guid("6a8c8d5f-2a54-42ee-8a7f-0961273cd625")
                        });
                });

            modelBuilder.Entity("Domain.Models.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("University");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f84e78ea-4426-4728-a3f6-c41c3ed22072"),
                            Code = "FPT",
                            Description = "Trường đại học tư thục hàng đầu Việt Nam về công nghệ thông tin và truyền thông.",
                            IsDeleted = false,
                            Name = "Đại học FPT"
                        },
                        new
                        {
                            Id = new Guid("6b70b92b-4201-4611-b6bb-716a5b3c4fec"),
                            Code = "UEH",
                            Description = "Trường đại học công lập đào tạo về kinh tế, tài chính, ngân hàng hàng đầu tại Việt Nam",
                            IsDeleted = false,
                            Name = "Đại học kinh tế TPHCM"
                        },
                        new
                        {
                            Id = new Guid("0e7c3b01-d954-4986-9d9d-f48127433211"),
                            Code = "HCMUE",
                            Description = "Trường đại học công lập đào tạo sư phạm lớn nhất Việt Nam",
                            IsDeleted = false,
                            Name = "Đại học Sư phạm Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            Id = new Guid("b629e405-9aca-4c19-bbe3-f4a50d9cca62"),
                            Code = "UMP",
                            Description = "Trường đại học công lập đào tạo về y dược lớn nhất Việt Nam",
                            IsDeleted = false,
                            Name = "Đại học Y Dược Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            Id = new Guid("cf30b5ef-1a8f-472f-af90-337a5cee4c16"),
                            Code = "UAH",
                            Description = "Trường đại học công lập đào tạo về kiến trúc hàng đầu Việt Nam",
                            IsDeleted = false,
                            Name = "Đại học Kiến trúc Thành phố Hồ Chí Minh"
                        });
                });

            modelBuilder.Entity("Domain.Models.UniversityDepartment", b =>
                {
                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UniversityId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("UniversityDepartments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("HighestScore")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0b84747-fbed-43e1-9cd1-ecf2e1bd3cc0"),
                            Address = "Tran quoc toan",
                            Email = "student@gmail.com",
                            FirstName = "Nguyen",
                            HighestScore = 10,
                            IsDeleted = false,
                            LastName = "Vu",
                            PasswordHash = new byte[] { 55, 154, 113, 3, 84, 236, 108, 120, 54, 25, 136, 98, 200, 126, 5, 209, 28, 113, 69, 70, 174, 124, 3, 251, 90, 88, 194, 209, 91, 65, 244, 28, 221, 88, 154, 47, 158, 202, 244, 169, 23, 105, 182, 78, 234, 79, 95, 60, 52, 109, 106, 243, 105, 33, 107, 85, 4, 157, 88, 163, 215, 182, 9, 76 },
                            PasswordSalt = new byte[] { 125, 19, 88, 21, 184, 211, 101, 212, 22, 132, 160, 174, 37, 191, 102, 128, 176, 152, 33, 111, 167, 21, 77, 181, 33, 145, 249, 147, 97, 5, 146, 145, 39, 99, 178, 34, 200, 5, 44, 16, 63, 246, 78, 162, 6, 32, 248, 238, 77, 141, 59, 194, 219, 15, 139, 131, 96, 154, 202, 86, 64, 53, 17, 67, 179, 232, 58, 183, 8, 40, 91, 83, 215, 186, 39, 106, 255, 105, 50, 85, 48, 226, 61, 18, 182, 119, 29, 229, 92, 13, 50, 27, 30, 110, 240, 75, 209, 193, 133, 211, 81, 121, 132, 239, 201, 247, 2, 51, 244, 96, 177, 202, 225, 67, 67, 63, 135, 57, 140, 171, 100, 73, 196, 228, 96, 54, 36, 176 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = new Guid("09d2d924-8c18-4e49-bbc4-f67c0204d7af"),
                            Address = "Tran quoc toan",
                            Email = "student2@gmail.com",
                            FirstName = "Minh",
                            HighestScore = 9,
                            IsDeleted = false,
                            LastName = "Vu",
                            PasswordHash = new byte[] { 68, 230, 40, 253, 24, 138, 65, 208, 179, 93, 214, 178, 187, 147, 206, 22, 229, 39, 158, 226, 223, 5, 104, 113, 62, 106, 11, 8, 68, 2, 9, 196, 178, 94, 131, 56, 87, 16, 138, 230, 36, 168, 166, 17, 6, 170, 140, 176, 248, 211, 237, 223, 145, 147, 217, 122, 19, 18, 168, 14, 7, 80, 108, 227 },
                            PasswordSalt = new byte[] { 139, 251, 209, 136, 55, 191, 173, 4, 110, 43, 175, 68, 156, 44, 161, 170, 233, 71, 13, 249, 199, 49, 110, 182, 236, 62, 2, 155, 10, 199, 227, 79, 172, 206, 239, 197, 181, 226, 129, 30, 75, 231, 134, 59, 54, 50, 30, 225, 140, 112, 110, 141, 237, 244, 237, 245, 214, 154, 50, 202, 12, 191, 14, 222, 75, 54, 2, 15, 226, 76, 156, 146, 178, 170, 172, 133, 239, 76, 191, 131, 165, 238, 141, 90, 245, 43, 213, 222, 216, 48, 121, 199, 236, 77, 49, 8, 246, 206, 198, 71, 149, 150, 127, 155, 154, 49, 136, 182, 228, 161, 91, 103, 247, 117, 31, 104, 16, 81, 89, 78, 55, 40, 36, 247, 154, 124, 240, 228 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = new Guid("5ddbd197-9ac9-42fb-bdfe-dee7dbe35efd"),
                            Address = "Tran quoc toan",
                            Email = "student2@gmail.com",
                            FirstName = "Minh",
                            HighestScore = 6,
                            IsDeleted = false,
                            LastName = "Duc",
                            PasswordHash = new byte[] { 243, 34, 190, 94, 240, 252, 136, 181, 31, 26, 252, 172, 61, 73, 253, 107, 34, 244, 214, 127, 28, 239, 193, 179, 83, 46, 167, 94, 145, 96, 236, 88, 154, 80, 124, 14, 148, 41, 85, 65, 131, 49, 224, 68, 2, 63, 97, 22, 218, 73, 87, 64, 132, 133, 114, 234, 24, 10, 246, 63, 156, 152, 100, 67 },
                            PasswordSalt = new byte[] { 163, 8, 230, 90, 170, 251, 73, 102, 73, 190, 141, 82, 30, 226, 69, 17, 154, 111, 246, 98, 133, 71, 236, 61, 41, 124, 40, 211, 66, 162, 14, 24, 174, 85, 1, 102, 19, 92, 110, 125, 184, 182, 60, 14, 53, 36, 183, 153, 127, 118, 227, 10, 16, 84, 107, 214, 123, 183, 223, 247, 234, 204, 43, 96, 54, 135, 116, 56, 230, 209, 142, 37, 135, 203, 129, 6, 10, 58, 228, 73, 101, 208, 165, 239, 148, 221, 246, 131, 60, 126, 87, 33, 47, 53, 52, 28, 18, 94, 78, 86, 9, 74, 183, 177, 17, 68, 43, 70, 116, 3, 225, 83, 247, 60, 189, 148, 65, 132, 206, 50, 56, 193, 14, 70, 16, 96, 201, 145 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = new Guid("f2dbff0f-0ccb-4cc3-91e3-d068431af710"),
                            Address = "Tran quoc toan",
                            Email = "student3@gmail.com",
                            FirstName = "Minh",
                            HighestScore = 7,
                            IsDeleted = false,
                            LastName = "Quan",
                            PasswordHash = new byte[] { 255, 198, 145, 158, 64, 32, 144, 171, 162, 31, 54, 181, 98, 149, 65, 165, 96, 164, 166, 156, 67, 156, 9, 98, 178, 65, 84, 104, 218, 3, 147, 25, 148, 250, 45, 176, 68, 210, 36, 239, 176, 131, 90, 2, 249, 144, 245, 77, 184, 15, 67, 153, 194, 137, 185, 54, 210, 110, 125, 188, 21, 91, 51, 126 },
                            PasswordSalt = new byte[] { 198, 148, 26, 16, 218, 1, 202, 92, 44, 99, 235, 252, 63, 159, 92, 237, 239, 228, 94, 166, 171, 211, 35, 58, 136, 159, 205, 117, 35, 150, 228, 192, 118, 11, 85, 24, 230, 70, 254, 172, 206, 99, 148, 84, 77, 110, 106, 218, 233, 17, 96, 46, 167, 171, 210, 220, 6, 115, 160, 34, 196, 89, 219, 99, 59, 98, 62, 138, 92, 164, 240, 107, 99, 102, 17, 121, 221, 2, 85, 11, 188, 138, 183, 11, 135, 98, 168, 183, 0, 112, 213, 145, 69, 212, 180, 221, 152, 156, 247, 0, 111, 69, 57, 181, 152, 101, 74, 78, 91, 33, 210, 114, 213, 94, 157, 93, 255, 29, 240, 182, 191, 248, 33, 8, 249, 69, 115, 19 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student3"
                        },
                        new
                        {
                            Id = new Guid("1a022b66-8b1c-461a-be8a-ec2a7b0741e9"),
                            Address = "Tran quoc toan",
                            Email = "student4@gmail.com",
                            FirstName = "Minh",
                            HighestScore = 6,
                            IsDeleted = false,
                            LastName = "Tam",
                            PasswordHash = new byte[] { 252, 129, 59, 184, 113, 113, 48, 207, 200, 190, 201, 0, 232, 237, 97, 216, 200, 78, 181, 70, 201, 101, 132, 230, 40, 119, 180, 92, 25, 219, 245, 238, 151, 87, 157, 78, 67, 94, 123, 100, 47, 119, 179, 185, 197, 108, 98, 205, 72, 134, 65, 65, 24, 47, 212, 113, 167, 91, 30, 70, 205, 202, 38, 11 },
                            PasswordSalt = new byte[] { 124, 95, 206, 79, 31, 149, 141, 87, 188, 180, 144, 113, 163, 156, 198, 122, 217, 218, 42, 174, 27, 196, 163, 223, 2, 5, 139, 144, 132, 164, 224, 191, 226, 19, 198, 111, 92, 92, 113, 112, 92, 57, 251, 105, 224, 23, 43, 60, 226, 104, 100, 63, 243, 83, 243, 69, 8, 76, 169, 46, 185, 42, 188, 177, 212, 111, 191, 16, 160, 233, 126, 252, 116, 86, 68, 200, 137, 126, 80, 75, 112, 166, 146, 210, 48, 173, 17, 26, 102, 61, 157, 21, 5, 137, 244, 119, 110, 202, 126, 109, 202, 170, 118, 62, 170, 45, 214, 254, 40, 40, 148, 191, 108, 130, 45, 139, 152, 64, 156, 231, 135, 54, 193, 110, 168, 132, 25, 185 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student4"
                        },
                        new
                        {
                            Id = new Guid("4c5d8bb2-b66c-49e7-982b-685ed23d1be8"),
                            Address = "Tran quoc toan",
                            Email = "student5@gmail.com",
                            FirstName = "Trinh",
                            HighestScore = 5,
                            IsDeleted = false,
                            LastName = "Tam",
                            PasswordHash = new byte[] { 65, 24, 205, 49, 224, 25, 8, 80, 138, 72, 4, 25, 225, 13, 209, 70, 64, 190, 154, 68, 37, 84, 44, 0, 168, 140, 147, 218, 25, 33, 204, 161, 206, 184, 35, 119, 190, 93, 3, 111, 86, 124, 58, 99, 95, 144, 48, 232, 78, 141, 117, 150, 71, 70, 243, 241, 97, 87, 39, 155, 238, 247, 39, 210 },
                            PasswordSalt = new byte[] { 142, 92, 29, 85, 76, 58, 119, 126, 255, 226, 126, 200, 105, 148, 77, 151, 5, 205, 162, 32, 243, 203, 137, 178, 111, 103, 52, 204, 226, 126, 45, 201, 60, 223, 171, 31, 167, 2, 228, 181, 124, 118, 204, 12, 60, 52, 141, 202, 144, 115, 199, 221, 209, 5, 244, 221, 246, 150, 242, 132, 59, 167, 12, 97, 93, 116, 94, 236, 187, 252, 37, 159, 43, 4, 205, 220, 107, 123, 223, 185, 192, 115, 215, 86, 103, 68, 148, 218, 193, 139, 130, 195, 185, 212, 228, 248, 0, 152, 117, 205, 109, 96, 229, 202, 42, 177, 61, 196, 24, 128, 150, 201, 200, 37, 103, 27, 96, 86, 165, 47, 19, 168, 247, 137, 216, 139, 198, 68 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student5"
                        },
                        new
                        {
                            Id = new Guid("324ed66e-e8de-4710-a139-18c50b442945"),
                            Address = "Tran quoc toan",
                            Email = "student6@gmail.com",
                            FirstName = "Van",
                            HighestScore = 4,
                            IsDeleted = false,
                            LastName = "Ba",
                            PasswordHash = new byte[] { 93, 116, 250, 120, 92, 241, 100, 168, 176, 237, 111, 176, 228, 82, 24, 131, 84, 182, 15, 78, 18, 150, 76, 68, 151, 84, 209, 181, 14, 146, 222, 229, 213, 106, 32, 117, 27, 195, 90, 229, 43, 216, 8, 235, 190, 67, 89, 66, 90, 194, 170, 10, 199, 158, 56, 13, 147, 10, 199, 1, 72, 187, 242, 1 },
                            PasswordSalt = new byte[] { 111, 43, 222, 121, 98, 240, 182, 165, 17, 42, 144, 36, 227, 74, 66, 182, 96, 97, 232, 92, 228, 249, 44, 145, 194, 244, 15, 210, 81, 110, 11, 212, 194, 25, 73, 102, 76, 6, 166, 99, 20, 162, 82, 90, 183, 138, 125, 255, 126, 177, 60, 150, 182, 228, 63, 62, 63, 178, 67, 31, 40, 139, 169, 251, 138, 146, 202, 115, 84, 54, 58, 204, 104, 83, 3, 191, 154, 184, 170, 189, 122, 96, 210, 102, 210, 54, 184, 218, 118, 98, 236, 69, 208, 97, 231, 105, 7, 112, 45, 96, 210, 12, 97, 188, 103, 140, 23, 204, 214, 255, 89, 123, 30, 10, 193, 17, 83, 238, 178, 108, 34, 118, 114, 175, 34, 221, 240, 33 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student6"
                        },
                        new
                        {
                            Id = new Guid("d406be20-d364-43c5-84bf-4d3e3be43ae0"),
                            Address = "Tran quoc toan",
                            Email = "student7@gmail.com",
                            FirstName = "Van",
                            HighestScore = 3,
                            IsDeleted = false,
                            LastName = "Hung",
                            PasswordHash = new byte[] { 32, 110, 206, 228, 92, 208, 228, 106, 97, 154, 82, 29, 48, 113, 54, 153, 204, 232, 114, 35, 229, 209, 179, 82, 151, 218, 228, 210, 189, 153, 248, 15, 106, 92, 3, 166, 129, 123, 126, 145, 192, 220, 146, 0, 7, 111, 144, 197, 97, 2, 244, 178, 25, 159, 236, 2, 41, 73, 131, 72, 250, 255, 247, 109 },
                            PasswordSalt = new byte[] { 122, 30, 200, 199, 94, 250, 148, 48, 110, 183, 56, 131, 233, 75, 57, 100, 41, 128, 132, 191, 174, 141, 15, 4, 52, 126, 205, 195, 55, 162, 165, 121, 200, 173, 244, 125, 56, 118, 171, 39, 108, 194, 200, 157, 235, 136, 111, 227, 234, 186, 158, 178, 135, 89, 22, 151, 27, 234, 148, 194, 209, 63, 211, 220, 122, 99, 68, 190, 82, 132, 158, 68, 55, 172, 216, 148, 109, 242, 157, 138, 49, 224, 168, 135, 157, 94, 69, 131, 17, 185, 60, 84, 100, 14, 212, 193, 16, 141, 147, 52, 125, 229, 127, 59, 54, 48, 85, 242, 225, 160, 35, 80, 183, 214, 8, 169, 33, 141, 99, 112, 26, 143, 123, 188, 158, 62, 129, 207 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student7"
                        },
                        new
                        {
                            Id = new Guid("312f4251-1f9f-4f80-b2ad-968fc339b134"),
                            Address = "Tran quoc toan",
                            Email = "student8@gmail.com",
                            FirstName = "Ly",
                            HighestScore = 2,
                            IsDeleted = false,
                            LastName = "Hung",
                            PasswordHash = new byte[] { 204, 231, 209, 165, 255, 254, 209, 31, 244, 236, 34, 192, 21, 38, 130, 196, 202, 7, 174, 161, 50, 47, 1, 69, 137, 111, 9, 165, 82, 139, 81, 34, 54, 183, 108, 130, 170, 176, 104, 150, 86, 84, 1, 231, 23, 112, 106, 172, 123, 241, 144, 130, 41, 163, 138, 100, 178, 210, 192, 152, 18, 163, 78, 137 },
                            PasswordSalt = new byte[] { 88, 33, 235, 160, 148, 114, 14, 20, 62, 18, 7, 146, 141, 122, 87, 31, 96, 108, 142, 184, 40, 198, 168, 124, 57, 195, 19, 154, 197, 49, 76, 14, 41, 52, 41, 208, 105, 197, 127, 145, 107, 236, 235, 145, 21, 7, 136, 230, 129, 177, 44, 77, 159, 125, 72, 252, 35, 226, 81, 68, 19, 84, 153, 232, 180, 235, 27, 134, 50, 179, 237, 16, 212, 73, 205, 212, 159, 166, 71, 235, 240, 2, 26, 115, 168, 252, 40, 174, 48, 126, 29, 46, 21, 11, 168, 80, 138, 219, 248, 221, 80, 233, 11, 122, 233, 147, 238, 234, 13, 232, 107, 248, 249, 62, 198, 86, 55, 113, 184, 241, 154, 163, 220, 176, 94, 180, 222, 198 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student8"
                        },
                        new
                        {
                            Id = new Guid("84a7c64a-feed-4fb2-8b1e-24e10aa382b2"),
                            Address = "Tran quoc toan",
                            Email = "student9@gmail.com",
                            FirstName = "Ly",
                            HighestScore = 1,
                            IsDeleted = false,
                            LastName = "Lac",
                            PasswordHash = new byte[] { 168, 29, 241, 146, 217, 27, 217, 54, 26, 202, 68, 233, 36, 187, 93, 231, 248, 124, 251, 20, 60, 7, 105, 141, 60, 17, 63, 22, 192, 59, 37, 119, 164, 186, 3, 206, 157, 105, 166, 37, 97, 113, 216, 34, 227, 253, 48, 178, 147, 149, 209, 198, 67, 107, 163, 236, 69, 41, 6, 130, 41, 5, 209, 196 },
                            PasswordSalt = new byte[] { 10, 141, 10, 115, 165, 131, 2, 98, 64, 8, 19, 167, 65, 76, 129, 98, 152, 221, 190, 124, 234, 27, 89, 115, 140, 44, 75, 139, 220, 159, 232, 23, 190, 93, 63, 82, 62, 20, 57, 27, 137, 17, 27, 133, 156, 175, 143, 137, 56, 123, 193, 101, 235, 116, 252, 202, 104, 84, 164, 166, 121, 183, 203, 162, 208, 44, 60, 250, 201, 140, 26, 65, 192, 146, 18, 226, 220, 112, 27, 105, 73, 148, 246, 143, 69, 13, 138, 197, 224, 205, 231, 136, 233, 160, 48, 198, 87, 164, 33, 5, 28, 180, 187, 232, 65, 250, 77, 182, 166, 213, 211, 10, 11, 80, 152, 187, 158, 99, 134, 4, 205, 209, 88, 112, 120, 204, 253, 172 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student9"
                        },
                        new
                        {
                            Id = new Guid("cb235a17-fd24-48cf-ba34-ac5ac698a832"),
                            Address = "Tran quoc toan",
                            Email = "student10@gmail.com",
                            FirstName = "Tran",
                            HighestScore = 9,
                            IsDeleted = false,
                            LastName = "Hong",
                            PasswordHash = new byte[] { 140, 240, 165, 77, 75, 216, 86, 13, 13, 221, 251, 45, 219, 98, 121, 210, 51, 106, 84, 107, 242, 19, 212, 186, 101, 2, 88, 72, 198, 197, 27, 39, 15, 63, 34, 180, 111, 198, 95, 150, 198, 203, 102, 17, 249, 138, 11, 10, 134, 227, 172, 178, 143, 239, 115, 53, 47, 132, 84, 76, 55, 207, 108, 86 },
                            PasswordSalt = new byte[] { 40, 66, 121, 205, 84, 195, 176, 79, 251, 81, 173, 145, 63, 132, 188, 125, 40, 134, 233, 77, 169, 245, 57, 165, 193, 216, 213, 127, 171, 247, 43, 101, 137, 202, 182, 178, 198, 119, 130, 200, 247, 173, 43, 181, 123, 163, 109, 169, 157, 134, 209, 129, 122, 13, 175, 240, 137, 146, 85, 53, 92, 19, 128, 108, 214, 28, 222, 185, 220, 215, 15, 34, 232, 85, 9, 14, 105, 232, 76, 31, 184, 185, 75, 181, 48, 216, 160, 51, 115, 239, 84, 67, 183, 59, 86, 90, 153, 206, 110, 67, 52, 209, 107, 194, 84, 193, 131, 100, 68, 123, 244, 82, 195, 102, 93, 221, 219, 193, 22, 2, 117, 107, 217, 143, 75, 16, 65, 30 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student10"
                        },
                        new
                        {
                            Id = new Guid("6d6ad990-1ff2-445b-8496-d766048e25cf"),
                            Address = "Tran quoc toan",
                            Email = "student11@gmail.com",
                            FirstName = "Nhan",
                            HighestScore = 10,
                            IsDeleted = false,
                            LastName = "Hong",
                            PasswordHash = new byte[] { 72, 240, 230, 51, 36, 51, 38, 158, 243, 135, 127, 15, 136, 61, 55, 229, 209, 223, 31, 127, 29, 127, 204, 63, 100, 222, 182, 52, 152, 13, 211, 136, 80, 1, 151, 11, 76, 11, 18, 106, 194, 67, 169, 152, 221, 62, 66, 166, 165, 42, 147, 48, 5, 235, 53, 188, 75, 117, 244, 29, 227, 198, 196, 87 },
                            PasswordSalt = new byte[] { 211, 151, 55, 207, 192, 198, 244, 102, 216, 123, 44, 208, 115, 150, 132, 208, 168, 159, 58, 126, 214, 159, 78, 121, 47, 37, 250, 174, 26, 112, 55, 183, 146, 70, 44, 182, 45, 94, 49, 140, 241, 85, 156, 110, 42, 191, 6, 39, 136, 61, 102, 119, 67, 215, 18, 40, 141, 252, 124, 86, 131, 28, 58, 212, 124, 67, 131, 23, 52, 186, 9, 231, 28, 126, 117, 151, 47, 217, 162, 200, 65, 24, 114, 96, 240, 76, 107, 107, 0, 137, 82, 96, 41, 128, 58, 17, 166, 94, 84, 134, 132, 32, 134, 197, 189, 181, 112, 198, 2, 25, 15, 84, 144, 72, 43, 199, 125, 27, 196, 249, 20, 118, 231, 206, 169, 95, 5, 60 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student11"
                        },
                        new
                        {
                            Id = new Guid("e798134f-8d1b-41aa-98c1-c8914240366d"),
                            Address = "Tran quoc toan",
                            Email = "student12@gmail.com",
                            FirstName = "Nhan",
                            HighestScore = 7,
                            IsDeleted = false,
                            LastName = "Chia",
                            PasswordHash = new byte[] { 90, 213, 51, 61, 151, 94, 210, 136, 217, 192, 221, 254, 197, 22, 54, 236, 111, 205, 226, 68, 110, 227, 222, 2, 38, 45, 104, 87, 127, 228, 89, 147, 231, 1, 54, 192, 89, 168, 224, 106, 202, 123, 19, 1, 211, 183, 75, 196, 201, 253, 151, 182, 21, 207, 179, 19, 57, 169, 255, 41, 71, 83, 70, 154 },
                            PasswordSalt = new byte[] { 63, 194, 181, 65, 229, 8, 10, 187, 50, 121, 89, 47, 225, 25, 60, 15, 156, 28, 180, 94, 156, 243, 76, 248, 79, 219, 43, 228, 16, 222, 122, 109, 157, 94, 240, 182, 192, 97, 64, 136, 186, 188, 198, 192, 26, 69, 191, 47, 77, 249, 151, 136, 172, 146, 36, 236, 78, 51, 206, 192, 168, 32, 104, 85, 139, 110, 247, 87, 141, 208, 127, 82, 171, 109, 218, 94, 181, 47, 156, 220, 36, 206, 81, 243, 217, 28, 223, 87, 72, 175, 228, 216, 205, 186, 47, 241, 226, 235, 171, 40, 206, 84, 235, 142, 250, 166, 96, 149, 179, 92, 189, 241, 89, 245, 164, 189, 4, 143, 26, 245, 167, 95, 136, 182, 115, 75, 59, 32 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student12"
                        },
                        new
                        {
                            Id = new Guid("8f744e72-da12-4038-a54e-7512a0ada884"),
                            Address = "Tran quoc toan",
                            Email = "student13@gmail.com",
                            FirstName = "Huan",
                            HighestScore = 8,
                            IsDeleted = false,
                            LastName = "Hoe",
                            PasswordHash = new byte[] { 82, 121, 47, 137, 126, 213, 38, 76, 175, 26, 77, 177, 71, 186, 204, 99, 195, 81, 110, 176, 220, 93, 85, 193, 91, 109, 200, 134, 2, 209, 14, 146, 238, 176, 68, 72, 68, 67, 139, 125, 214, 220, 41, 146, 161, 111, 93, 111, 100, 16, 182, 42, 234, 13, 151, 232, 34, 102, 169, 215, 119, 51, 177, 25 },
                            PasswordSalt = new byte[] { 44, 207, 149, 177, 88, 26, 108, 252, 233, 239, 104, 102, 32, 38, 208, 235, 181, 246, 173, 90, 113, 233, 173, 229, 210, 231, 209, 101, 171, 66, 233, 37, 203, 31, 127, 20, 173, 252, 172, 13, 249, 201, 204, 249, 165, 146, 86, 173, 49, 229, 96, 159, 243, 44, 79, 23, 104, 83, 135, 250, 38, 89, 90, 83, 21, 237, 235, 30, 184, 198, 49, 108, 70, 138, 213, 167, 62, 193, 34, 185, 115, 205, 60, 216, 147, 66, 162, 128, 5, 29, 242, 79, 231, 0, 118, 130, 14, 67, 170, 185, 15, 40, 17, 149, 3, 77, 139, 33, 181, 29, 213, 152, 93, 86, 53, 218, 180, 183, 188, 248, 140, 191, 230, 45, 187, 113, 174, 101 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student13"
                        },
                        new
                        {
                            Id = new Guid("24d15338-310e-4d3d-9e39-86444fc0ddec"),
                            Address = "Tran quoc toan",
                            Email = "student14@gmail.com",
                            FirstName = "Cook",
                            HighestScore = 1,
                            IsDeleted = false,
                            LastName = "Lee",
                            PasswordHash = new byte[] { 104, 181, 226, 152, 129, 170, 69, 190, 181, 249, 191, 132, 64, 240, 89, 4, 109, 238, 188, 212, 228, 20, 212, 144, 54, 81, 89, 210, 121, 233, 143, 250, 227, 216, 85, 108, 205, 170, 79, 148, 226, 127, 97, 97, 15, 158, 4, 144, 105, 27, 118, 194, 229, 141, 161, 1, 16, 235, 48, 64, 190, 193, 122, 165 },
                            PasswordSalt = new byte[] { 131, 192, 118, 159, 19, 98, 229, 228, 176, 196, 233, 237, 34, 30, 164, 25, 122, 15, 12, 156, 83, 142, 114, 229, 144, 236, 56, 149, 23, 47, 129, 232, 22, 158, 172, 3, 42, 58, 70, 98, 142, 172, 244, 201, 183, 68, 199, 104, 168, 146, 75, 201, 234, 91, 126, 245, 21, 175, 240, 247, 151, 42, 34, 122, 55, 240, 228, 3, 231, 192, 2, 119, 227, 218, 205, 69, 123, 36, 165, 173, 140, 206, 80, 163, 11, 233, 141, 151, 175, 43, 38, 33, 7, 1, 4, 172, 251, 206, 141, 112, 61, 110, 162, 176, 176, 98, 231, 23, 138, 36, 181, 187, 61, 253, 71, 149, 155, 176, 174, 124, 41, 103, 181, 166, 145, 101, 42, 118 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student14"
                        },
                        new
                        {
                            Id = new Guid("1eff27be-f2ea-4df7-93a5-33c7ba5e2d98"),
                            Address = "Tran quoc toan",
                            Email = "student15@gmail.com",
                            FirstName = "Trinh",
                            HighestScore = 1,
                            IsDeleted = false,
                            LastName = "Quan",
                            PasswordHash = new byte[] { 88, 99, 73, 115, 151, 252, 80, 34, 48, 174, 161, 47, 226, 36, 40, 52, 203, 160, 155, 191, 28, 243, 167, 41, 9, 49, 145, 32, 230, 36, 105, 75, 228, 158, 186, 162, 194, 13, 108, 179, 162, 119, 238, 224, 25, 96, 90, 200, 144, 252, 132, 179, 177, 23, 212, 159, 167, 243, 218, 105, 255, 206, 212, 68 },
                            PasswordSalt = new byte[] { 72, 50, 226, 217, 12, 43, 109, 213, 131, 50, 163, 19, 73, 48, 149, 204, 119, 252, 12, 191, 242, 5, 196, 44, 113, 58, 212, 167, 46, 24, 125, 86, 71, 129, 253, 74, 141, 232, 61, 198, 240, 222, 15, 112, 30, 63, 168, 1, 84, 129, 214, 128, 177, 162, 177, 214, 231, 249, 0, 223, 98, 248, 87, 68, 58, 87, 109, 115, 239, 113, 233, 216, 51, 196, 68, 30, 168, 54, 124, 24, 64, 198, 242, 232, 215, 35, 234, 61, 57, 231, 34, 224, 206, 59, 204, 130, 189, 111, 17, 82, 230, 99, 179, 93, 147, 119, 99, 27, 213, 141, 177, 64, 70, 236, 253, 18, 247, 187, 135, 133, 172, 224, 214, 47, 57, 179, 35, 218 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student15"
                        },
                        new
                        {
                            Id = new Guid("99c5faa8-d3fe-45b3-a871-86117ef93111"),
                            Address = "Tran quoc toan",
                            Email = "student16@gmail.com",
                            FirstName = "Trinh",
                            HighestScore = 5,
                            IsDeleted = false,
                            LastName = "Trong",
                            PasswordHash = new byte[] { 254, 160, 161, 169, 118, 237, 129, 182, 51, 154, 143, 109, 108, 46, 147, 52, 94, 147, 59, 77, 249, 165, 122, 24, 234, 226, 186, 181, 162, 185, 196, 240, 126, 244, 154, 179, 156, 232, 89, 146, 164, 235, 145, 127, 93, 47, 87, 158, 53, 233, 90, 151, 220, 39, 70, 124, 223, 103, 242, 42, 197, 41, 187, 211 },
                            PasswordSalt = new byte[] { 19, 228, 170, 150, 12, 87, 165, 37, 199, 65, 247, 17, 109, 219, 217, 196, 201, 135, 23, 70, 124, 104, 252, 181, 20, 84, 164, 83, 246, 55, 142, 180, 147, 113, 188, 24, 196, 61, 61, 94, 210, 109, 115, 153, 22, 29, 123, 20, 42, 195, 249, 194, 105, 80, 174, 158, 164, 90, 201, 76, 206, 11, 159, 25, 196, 72, 116, 0, 211, 154, 175, 243, 37, 128, 4, 186, 109, 146, 205, 91, 114, 240, 170, 54, 65, 139, 108, 228, 105, 147, 22, 217, 116, 246, 14, 117, 110, 217, 244, 245, 231, 8, 242, 4, 27, 19, 90, 154, 238, 127, 0, 131, 245, 202, 177, 99, 53, 26, 108, 53, 186, 1, 199, 229, 193, 70, 29, 148 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student16"
                        },
                        new
                        {
                            Id = new Guid("5b670b4c-a8dc-4cca-8d2b-0bb45d69a702"),
                            Address = "Tran quoc toan",
                            Email = "student17@gmail.com",
                            FirstName = "Kim",
                            HighestScore = 1,
                            IsDeleted = false,
                            LastName = "Trong",
                            PasswordHash = new byte[] { 134, 109, 20, 123, 225, 123, 198, 244, 32, 134, 22, 46, 36, 62, 16, 76, 254, 19, 75, 249, 119, 169, 187, 156, 97, 101, 210, 112, 140, 172, 94, 8, 31, 245, 23, 4, 157, 140, 165, 64, 147, 180, 80, 177, 165, 2, 18, 191, 36, 8, 11, 108, 33, 159, 180, 97, 120, 168, 7, 139, 54, 169, 2, 21 },
                            PasswordSalt = new byte[] { 33, 217, 129, 1, 224, 21, 190, 18, 220, 101, 154, 101, 229, 135, 100, 174, 199, 28, 211, 245, 236, 65, 147, 122, 121, 100, 49, 5, 125, 8, 198, 41, 234, 87, 75, 106, 130, 107, 158, 203, 31, 237, 221, 63, 78, 147, 221, 53, 253, 84, 67, 210, 108, 126, 137, 62, 251, 13, 140, 71, 150, 73, 236, 205, 92, 186, 51, 153, 248, 30, 189, 137, 58, 192, 100, 55, 72, 75, 222, 119, 183, 92, 64, 9, 48, 122, 197, 242, 141, 75, 122, 146, 46, 160, 23, 144, 6, 125, 186, 198, 239, 145, 16, 197, 37, 33, 5, 13, 176, 216, 120, 223, 31, 228, 87, 36, 118, 77, 216, 176, 102, 116, 134, 176, 12, 112, 187, 66 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student17"
                        },
                        new
                        {
                            Id = new Guid("c30d316f-9c93-42c9-8e72-0b3efa896192"),
                            Address = "Tran quoc toan",
                            Email = "student18@gmail.com",
                            FirstName = "Kim",
                            HighestScore = 10,
                            IsDeleted = false,
                            LastName = "Ly",
                            PasswordHash = new byte[] { 209, 45, 143, 202, 116, 130, 16, 171, 160, 66, 135, 0, 237, 167, 196, 152, 91, 170, 94, 213, 192, 38, 108, 161, 100, 85, 79, 227, 229, 154, 162, 212, 193, 51, 141, 138, 201, 197, 81, 56, 43, 169, 172, 91, 97, 78, 189, 86, 23, 32, 209, 65, 51, 171, 244, 193, 82, 22, 35, 15, 243, 78, 109, 90 },
                            PasswordSalt = new byte[] { 83, 41, 177, 255, 91, 156, 57, 108, 158, 44, 186, 36, 195, 242, 109, 250, 148, 144, 44, 71, 149, 224, 132, 80, 172, 26, 241, 245, 111, 23, 168, 244, 92, 224, 123, 8, 254, 78, 103, 78, 22, 149, 171, 70, 59, 87, 37, 250, 151, 246, 203, 109, 71, 178, 195, 170, 188, 100, 126, 165, 169, 35, 130, 27, 137, 236, 199, 87, 205, 64, 13, 64, 47, 1, 81, 78, 135, 66, 9, 166, 138, 32, 89, 199, 33, 28, 111, 152, 15, 133, 32, 157, 229, 142, 124, 149, 207, 112, 211, 52, 213, 140, 44, 240, 73, 44, 200, 33, 255, 249, 88, 147, 112, 249, 112, 221, 131, 107, 195, 169, 46, 8, 5, 44, 199, 159, 83, 192 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student18"
                        },
                        new
                        {
                            Id = new Guid("666bc14a-4078-4619-85f1-bc63033c556f"),
                            Address = "Tran quoc toan",
                            Email = "student19@gmail.com",
                            FirstName = "Cach",
                            HighestScore = 2,
                            IsDeleted = false,
                            LastName = "Ly",
                            PasswordHash = new byte[] { 253, 53, 176, 248, 131, 177, 152, 18, 80, 208, 124, 191, 183, 110, 41, 171, 140, 157, 48, 55, 238, 51, 40, 34, 17, 149, 230, 139, 196, 178, 183, 12, 84, 118, 6, 119, 159, 145, 220, 243, 32, 167, 56, 183, 105, 8, 174, 88, 166, 105, 227, 57, 203, 84, 216, 52, 153, 132, 224, 42, 71, 168, 132, 59 },
                            PasswordSalt = new byte[] { 203, 213, 131, 118, 19, 236, 225, 211, 12, 54, 125, 174, 26, 34, 29, 238, 160, 185, 10, 116, 62, 120, 134, 134, 163, 147, 51, 247, 40, 136, 208, 77, 180, 102, 80, 112, 51, 184, 251, 184, 221, 227, 88, 239, 102, 7, 124, 112, 20, 238, 175, 168, 201, 14, 213, 218, 226, 151, 146, 255, 209, 239, 201, 201, 216, 109, 153, 123, 8, 120, 37, 6, 222, 76, 72, 143, 122, 84, 204, 80, 141, 80, 226, 125, 220, 213, 244, 254, 145, 205, 214, 80, 241, 195, 74, 143, 100, 55, 129, 198, 146, 251, 121, 40, 192, 59, 64, 147, 58, 100, 67, 62, 89, 65, 37, 154, 43, 195, 105, 163, 115, 142, 160, 154, 130, 29, 177, 212 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student19"
                        },
                        new
                        {
                            Id = new Guid("96e0097f-ce73-4950-8ee2-89b313581154"),
                            Address = "Tran quoc toan",
                            Email = "student20@gmail.com",
                            FirstName = "Biet",
                            HighestScore = 3,
                            IsDeleted = false,
                            LastName = "Ly",
                            PasswordHash = new byte[] { 105, 63, 38, 16, 117, 219, 230, 240, 56, 31, 107, 149, 66, 4, 74, 32, 198, 167, 43, 228, 197, 70, 85, 38, 159, 35, 80, 139, 137, 83, 169, 118, 208, 194, 174, 44, 76, 165, 213, 136, 110, 74, 42, 216, 197, 50, 188, 231, 14, 67, 7, 189, 187, 159, 123, 3, 132, 81, 100, 228, 168, 183, 48, 163 },
                            PasswordSalt = new byte[] { 39, 12, 55, 179, 161, 48, 187, 71, 2, 114, 82, 13, 192, 157, 233, 134, 3, 6, 93, 236, 200, 95, 237, 182, 119, 0, 117, 56, 228, 111, 232, 52, 231, 241, 19, 84, 109, 207, 114, 22, 38, 251, 119, 19, 247, 70, 71, 136, 236, 9, 88, 191, 35, 242, 226, 44, 14, 172, 5, 57, 56, 227, 120, 65, 150, 158, 174, 161, 150, 244, 204, 98, 153, 38, 90, 145, 204, 55, 56, 175, 159, 137, 101, 5, 81, 114, 167, 30, 25, 226, 63, 160, 10, 144, 251, 230, 128, 32, 238, 42, 57, 170, 213, 114, 5, 16, 136, 153, 84, 229, 136, 107, 83, 4, 96, 5, 196, 191, 18, 68, 84, 82, 23, 250, 172, 6, 58, 5 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student20"
                        },
                        new
                        {
                            Id = new Guid("c5eacfa9-ec87-4150-bedc-ca141458b5a3"),
                            Address = "Tran quoc toan",
                            Email = "student21@gmail.com",
                            FirstName = "Bien",
                            HighestScore = 4,
                            IsDeleted = false,
                            LastName = "Ly",
                            PasswordHash = new byte[] { 32, 80, 200, 96, 7, 176, 57, 78, 116, 110, 26, 92, 97, 227, 247, 252, 117, 5, 182, 101, 230, 111, 107, 233, 214, 251, 251, 209, 133, 135, 200, 255, 171, 220, 238, 26, 239, 94, 150, 1, 162, 44, 0, 138, 30, 211, 63, 169, 75, 181, 242, 178, 211, 132, 54, 175, 56, 182, 91, 255, 133, 150, 225, 191 },
                            PasswordSalt = new byte[] { 77, 214, 76, 41, 170, 163, 224, 255, 217, 30, 27, 164, 31, 78, 6, 210, 212, 128, 164, 46, 237, 34, 215, 224, 174, 115, 88, 35, 223, 255, 199, 188, 224, 151, 157, 100, 170, 4, 118, 22, 24, 11, 165, 179, 57, 209, 152, 150, 172, 251, 133, 195, 36, 173, 172, 35, 110, 154, 213, 107, 130, 67, 218, 103, 37, 140, 170, 32, 32, 218, 193, 62, 70, 89, 52, 206, 210, 237, 97, 98, 251, 64, 169, 103, 197, 255, 195, 230, 197, 129, 79, 193, 231, 96, 104, 129, 218, 143, 3, 166, 140, 79, 177, 249, 164, 82, 102, 190, 55, 64, 167, 144, 57, 208, 55, 116, 214, 3, 150, 150, 145, 65, 157, 184, 60, 144, 228, 142 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student21"
                        },
                        new
                        {
                            Id = new Guid("a6be20e2-5927-4cce-bed4-258f919f82e6"),
                            Address = "tran quoc toan",
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            IsDeleted = false,
                            LastName = "admin",
                            PasswordHash = new byte[] { 179, 223, 46, 97, 143, 181, 53, 245, 130, 156, 103, 203, 218, 87, 53, 148, 225, 243, 142, 221, 37, 247, 185, 200, 70, 252, 54, 133, 175, 153, 244, 200, 44, 36, 89, 51, 71, 90, 68, 216, 163, 227, 88, 145, 241, 90, 233, 58, 69, 237, 11, 112, 138, 201, 245, 239, 110, 144, 251, 68, 223, 220, 244, 137 },
                            PasswordSalt = new byte[] { 100, 30, 122, 187, 238, 178, 92, 77, 179, 200, 138, 112, 151, 50, 178, 243, 231, 106, 52, 14, 126, 16, 47, 166, 13, 233, 12, 68, 63, 109, 132, 106, 56, 76, 82, 34, 41, 251, 137, 136, 217, 218, 131, 236, 67, 48, 24, 98, 250, 144, 115, 68, 66, 158, 134, 70, 128, 117, 183, 117, 169, 49, 146, 29, 251, 6, 100, 30, 131, 132, 203, 88, 194, 38, 154, 23, 143, 99, 138, 245, 150, 45, 198, 166, 230, 44, 219, 236, 110, 224, 182, 11, 41, 158, 6, 192, 170, 96, 44, 212, 229, 65, 8, 220, 151, 182, 55, 37, 163, 18, 31, 95, 7, 19, 228, 25, 188, 107, 55, 167, 29, 173, 214, 216, 47, 255, 112, 87 },
                            PhoneNumber = "1234567890",
                            Role = 0,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Models.Attempt", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Attempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.AttemptDetail", b =>
                {
                    b.HasOne("Domain.Models.Attempt", "Attempt")
                        .WithMany("AttemptDetails")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ExaminationQuestion", "ExaminationQuestion")
                        .WithMany("AttemptDetails")
                        .HasForeignKey("ExaminationQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("ExaminationQuestion");
                });

            modelBuilder.Entity("Domain.Models.ExaminationQuestion", b =>
                {
                    b.HasOne("Domain.Models.Examination", "Examination")
                        .WithMany("ExaminationQuestions")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Question", "Question")
                        .WithMany("ExaminationQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Models.GroupDepartment", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("GroupDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupDepartments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.Models.MBTI_Department", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("MBTI_Departments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.MBTI", "MBTI")
                        .WithMany("MBTI_Departments")
                        .HasForeignKey("MBTI_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("MBTI");
                });

            modelBuilder.Entity("Domain.Models.MBTI_ExamQuestion", b =>
                {
                    b.HasOne("Domain.Models.MBTI_Exam", "MBTI_Exam")
                        .WithMany("MBTI_ExamDetails")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.MBTI_Question", "MBTI_Question")
                        .WithMany("MBTI_ExamDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MBTI_Exam");

                    b.Navigation("MBTI_Question");
                });

            modelBuilder.Entity("Domain.Models.MBTI_UserRecord", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("MBTI_UserRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Major", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Majors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.HasOne("Domain.Models.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Domain.Models.RecordDetail", b =>
                {
                    b.HasOne("Domain.Models.MBTI_ExamQuestion", "MBTI_ExamQuestion")
                        .WithMany("RecordDetails")
                        .HasForeignKey("MBTI_ExamQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.MBTI_UserRecord", "MBTI_UserRecord")
                        .WithMany("RecordDetails")
                        .HasForeignKey("UserRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MBTI_ExamQuestion");

                    b.Navigation("MBTI_UserRecord");
                });

            modelBuilder.Entity("Domain.Models.SubjectGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany("Topics")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Models.UniversityDepartment", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("UniversityDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.University", "University")
                        .WithMany("UniversityDepartments")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.Models.Attempt", b =>
                {
                    b.Navigation("AttemptDetails");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("GroupDepartments");

                    b.Navigation("MBTI_Departments");

                    b.Navigation("Majors");

                    b.Navigation("UniversityDepartments");
                });

            modelBuilder.Entity("Domain.Models.Examination", b =>
                {
                    b.Navigation("ExaminationQuestions");
                });

            modelBuilder.Entity("Domain.Models.ExaminationQuestion", b =>
                {
                    b.Navigation("AttemptDetails");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Navigation("GroupDepartments");

                    b.Navigation("SubjectGroups");
                });

            modelBuilder.Entity("Domain.Models.MBTI", b =>
                {
                    b.Navigation("MBTI_Departments");
                });

            modelBuilder.Entity("Domain.Models.MBTI_Exam", b =>
                {
                    b.Navigation("MBTI_ExamDetails");
                });

            modelBuilder.Entity("Domain.Models.MBTI_ExamQuestion", b =>
                {
                    b.Navigation("RecordDetails");
                });

            modelBuilder.Entity("Domain.Models.MBTI_Question", b =>
                {
                    b.Navigation("MBTI_ExamDetails");
                });

            modelBuilder.Entity("Domain.Models.MBTI_UserRecord", b =>
                {
                    b.Navigation("RecordDetails");
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.Navigation("ExaminationQuestions");
                });

            modelBuilder.Entity("Domain.Models.Subject", b =>
                {
                    b.Navigation("SubjectGroups");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Models.University", b =>
                {
                    b.Navigation("UniversityDepartments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("MBTI_UserRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
