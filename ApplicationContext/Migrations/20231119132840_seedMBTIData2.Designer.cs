// <auto-generated />
using System;
using ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApplicationContext.Migrations
{
    [DbContext(typeof(HighSchoolQuestContext))]
    [Migration("20231119132840_seedMBTIData2")]
    partial class seedMBTIData2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttempType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attempts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            AttempType = 0,
                            CreatedDate = new DateTime(2023, 11, 19, 13, 28, 40, 484, DateTimeKind.Utc).AddTicks(515),
                            ExamDate = new DateTime(2023, 11, 20, 13, 28, 40, 484, DateTimeKind.Utc).AddTicks(520),
                            IsDeleted = false,
                            Name = "bai kiem tra kien thuc xa hoi",
                            Result = "Pass",
                            Score = 10,
                            UserId = new Guid("f0b84747-fbed-43e1-9cd1-ecf2e1bd3cc0")
                        });
                });

            modelBuilder.Entity("Domain.Models.AttemptDetail", b =>
                {
                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExaminationQuestionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAnswered")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AttemptId", "ExaminationQuestionId");

                    b.HasIndex("ExaminationQuestionId");

                    b.ToTable("AttemptDetails");

                    b.HasData(
                        new
                        {
                            AttemptId = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            ExaminationQuestionId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsCorrect = true,
                            UserAnswered = "Paris"
                        },
                        new
                        {
                            AttemptId = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            ExaminationQuestionId = new Guid("046b0f97-130a-48c7-b1ad-40033ae41fff"),
                            IsCorrect = true,
                            UserAnswered = "7"
                        },
                        new
                        {
                            AttemptId = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            ExaminationQuestionId = new Guid("2339983b-33db-4333-9b1b-a5514faa280a"),
                            IsCorrect = true,
                            UserAnswered = "1776-07-04"
                        },
                        new
                        {
                            AttemptId = new Guid("9b8daa9f-7f8c-41d9-aa34-ba2b1010f4ed"),
                            ExaminationQuestionId = new Guid("139c3a57-af40-4c80-96fc-508957db3780"),
                            IsCorrect = true,
                            UserAnswered = "London"
                        });
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float?>("RequiredScore")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de305d54-75b4-431b-adb2-eb6b9e546013"),
                            Code = "SE",
                            Description = "các ngành về máy tính",
                            IsDeleted = false,
                            Name = "Công nghệ thông tin",
                            RequiredScore = 22f
                        },
                        new
                        {
                            Id = new Guid("b8034210-23fd-4af9-9d7f-f260a0cdef97"),
                            Code = "KT",
                            Description = "các ngành về kinh tế",
                            IsDeleted = false,
                            Name = "Kinh tế",
                            RequiredScore = 22f
                        },
                        new
                        {
                            Id = new Guid("4c7c3b5f-2a54-42ee-8a7f-0961273cd329"),
                            Code = "YH",
                            Description = "Các ngành y dược",
                            IsDeleted = false,
                            Name = "Y học",
                            RequiredScore = 27f
                        },
                        new
                        {
                            Id = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            Code = "SP",
                            Description = "Các ngành sư phạm",
                            IsDeleted = false,
                            Name = "Sư phạm",
                            RequiredScore = 25f
                        },
                        new
                        {
                            Id = new Guid("bb3a10db-c4d4-4b45-9d15-0c38f41e8f5f"),
                            Code = "TK",
                            Description = "Các ngành thiết kế/nghệ thuật",
                            IsDeleted = false,
                            Name = "Thiết kế",
                            RequiredScore = 22f
                        },
                        new
                        {
                            Id = new Guid("67d181a2-ac85-4aaa-bcad-863b8695071b"),
                            Code = "LAW",
                            Description = "Các ngành về luật",
                            IsDeleted = false,
                            Name = "Luật",
                            RequiredScore = 23f
                        },
                        new
                        {
                            Id = new Guid("f9cf3140-b872-4837-b965-d37f94e33c0b"),
                            Code = "TT",
                            Description = "Các ngành về báo chí/truyền thông",
                            IsDeleted = false,
                            Name = "Truyền Thông",
                            RequiredScore = 24f
                        },
                        new
                        {
                            Id = new Guid("5fbe7741-917c-45f5-8f78-c06327ede146"),
                            Code = "NN",
                            Description = "Các ngành về ngôn ngữ",
                            IsDeleted = false,
                            Name = "Ngôn Ngữ",
                            RequiredScore = 22f
                        });
                });

            modelBuilder.Entity("Domain.Models.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalNumberOfQuestion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Examinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            Description = "de thi toan",
                            IsDeleted = false,
                            Name = "de toan",
                            TotalNumberOfQuestion = 4
                        },
                        new
                        {
                            Id = new Guid("1e157ceb-9adb-48bf-84de-ae050c2f89b8"),
                            Description = "De thi hoa hoc",
                            IsDeleted = false,
                            Name = "de hoa",
                            TotalNumberOfQuestion = 20
                        },
                        new
                        {
                            Id = new Guid("e296dd9b-4007-4666-b6fe-35664dcaed77"),
                            Description = "De thi sinh hoc",
                            IsDeleted = false,
                            Name = "de sinh",
                            TotalNumberOfQuestion = 21
                        },
                        new
                        {
                            Id = new Guid("80b9fa50-f8aa-4bc5-bf05-39e8f54f8f06"),
                            Description = "De thi van",
                            IsDeleted = false,
                            Name = "de van",
                            TotalNumberOfQuestion = 5
                        },
                        new
                        {
                            Id = new Guid("61bb287c-ea61-47ec-883d-628ed98bb716"),
                            Description = "De thi am nhac",
                            IsDeleted = false,
                            Name = "de music",
                            TotalNumberOfQuestion = 10
                        });
                });

            modelBuilder.Entity("Domain.Models.ExaminationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExaminationQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            ExaminationId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsDeleted = false,
                            QuestionId = new Guid("238f27e2-fe56-4ce8-88f8-d3aa7b56f976")
                        },
                        new
                        {
                            Id = new Guid("046b0f97-130a-48c7-b1ad-40033ae41fff"),
                            ExaminationId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsDeleted = false,
                            QuestionId = new Guid("85e5d51b-16c7-4d0d-8f40-766a6a902698")
                        },
                        new
                        {
                            Id = new Guid("2339983b-33db-4333-9b1b-a5514faa280a"),
                            ExaminationId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsDeleted = false,
                            QuestionId = new Guid("3e28911a-1220-4c7f-a1c6-bcce0b74ccfe")
                        },
                        new
                        {
                            Id = new Guid("139c3a57-af40-4c80-96fc-508957db3780"),
                            ExaminationId = new Guid("ad0080ef-ac58-450b-b086-bc7f856c1fec"),
                            IsDeleted = false,
                            QuestionId = new Guid("21eb2451-53ac-44f6-9a6c-751d394a8936")
                        });
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1"),
                            Code = "GroupA",
                            Description = "Khối A",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("632ba05a-9ed9-4a00-9ac8-e1c642919806"),
                            Code = "GroupB",
                            Description = "Khối B",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("dab75dab-d28c-45ad-98a6-b3f25dec3ad0"),
                            Code = "GroupC",
                            Description = "Khối C",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf"),
                            Code = "GroupD",
                            Description = "Khối D",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("20bbb66d-3117-4050-ae30-4caf85831530"),
                            Code = "GroupH",
                            Description = "Khối H",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b8de514a-7bba-4b8b-bae1-fc36c07ed52b"),
                            Code = "GroupV",
                            Description = "Khối V",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Models.GroupDepartment", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupDepartments");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("de305d54-75b4-431b-adb2-eb6b9e546013"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("de305d54-75b4-431b-adb2-eb6b9e546013"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("5fbe7741-917c-45f5-8f78-c06327ede146"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("b8034210-23fd-4af9-9d7f-f260a0cdef97"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("b8034210-23fd-4af9-9d7f-f260a0cdef97"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("4c7c3b5f-2a54-42ee-8a7f-0961273cd329"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("4c7c3b5f-2a54-42ee-8a7f-0961273cd329"),
                            GroupId = new Guid("632ba05a-9ed9-4a00-9ac8-e1c642919806")
                        },
                        new
                        {
                            DepartmentId = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            GroupId = new Guid("632ba05a-9ed9-4a00-9ac8-e1c642919806")
                        },
                        new
                        {
                            DepartmentId = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            GroupId = new Guid("dab75dab-d28c-45ad-98a6-b3f25dec3ad0")
                        },
                        new
                        {
                            DepartmentId = new Guid("e35d862c-1f43-456b-a60b-1b2c7e44ab78"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("bb3a10db-c4d4-4b45-9d15-0c38f41e8f5f"),
                            GroupId = new Guid("20bbb66d-3117-4050-ae30-4caf85831530")
                        },
                        new
                        {
                            DepartmentId = new Guid("bb3a10db-c4d4-4b45-9d15-0c38f41e8f5f"),
                            GroupId = new Guid("b8de514a-7bba-4b8b-bae1-fc36c07ed52b")
                        },
                        new
                        {
                            DepartmentId = new Guid("67d181a2-ac85-4aaa-bcad-863b8695071b"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("67d181a2-ac85-4aaa-bcad-863b8695071b"),
                            GroupId = new Guid("dab75dab-d28c-45ad-98a6-b3f25dec3ad0")
                        },
                        new
                        {
                            DepartmentId = new Guid("67d181a2-ac85-4aaa-bcad-863b8695071b"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        },
                        new
                        {
                            DepartmentId = new Guid("f9cf3140-b872-4837-b965-d37f94e33c0b"),
                            GroupId = new Guid("f5e0affd-9745-4859-8171-77b99fc725c1")
                        },
                        new
                        {
                            DepartmentId = new Guid("f9cf3140-b872-4837-b965-d37f94e33c0b"),
                            GroupId = new Guid("dab75dab-d28c-45ad-98a6-b3f25dec3ad0")
                        },
                        new
                        {
                            DepartmentId = new Guid("f9cf3140-b872-4837-b965-d37f94e33c0b"),
                            GroupId = new Guid("09f798c3-4d01-437f-b361-bf230efd7ddf")
                        });
                });

            modelBuilder.Entity("Domain.Models.MBTI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MBTI");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "INTJ",
                            Description = "Imaginative and strategic thinkers, with a plan for everything.",
                            Name = "The Architect"
                        },
                        new
                        {
                            Id = 2,
                            Code = "INTP",
                            Description = "Innovative inventors with an unquenchable thirst for knowledge.",
                            Name = "The Logician"
                        },
                        new
                        {
                            Id = 3,
                            Code = "ENTJ",
                            Description = "Bold, imaginative and strong-willed leaders, always finding a way – or making one.",
                            Name = "The Commander"
                        },
                        new
                        {
                            Id = 4,
                            Code = "ENTP",
                            Description = "Smart and curious thinkers who cannot resist an intellectual challenge.",
                            Name = "The Debater"
                        },
                        new
                        {
                            Id = 5,
                            Code = "INFJ",
                            Description = "Quiet and mystical, yet very inspiring and tireless idealists.",
                            Name = "The Advocate"
                        },
                        new
                        {
                            Id = 6,
                            Code = "INFP",
                            Description = "Poetic, kind and altruistic people, always eager to help a good cause.",
                            Name = "The Mediator"
                        },
                        new
                        {
                            Id = 7,
                            Code = "ENFJ",
                            Description = "Charismatic and inspiring leaders, able to mesmerize their listeners.",
                            Name = "The Protagonist"
                        },
                        new
                        {
                            Id = 8,
                            Code = "ENFP",
                            Description = "Enthusiastic, creative and sociable free spirits, who can always find a reason to smile.",
                            Name = "The Campaigner"
                        },
                        new
                        {
                            Id = 9,
                            Code = "ISTJ",
                            Description = "Practical and fact-minded individuals, whose reliability cannot be doubted.",
                            Name = "The Logistician"
                        },
                        new
                        {
                            Id = 10,
                            Code = "ISFJ",
                            Description = "Very dedicated and warm protectors, always ready to defend their loved ones.",
                            Name = "The Defender"
                        },
                        new
                        {
                            Id = 11,
                            Code = "ESTJ",
                            Description = "Excellent administrators, unsurpassed at managing things – or people.",
                            Name = "The Executive"
                        },
                        new
                        {
                            Id = 12,
                            Code = "ESFJ",
                            Description = "Extraordinarily caring, social and popular people, always eager to help.",
                            Name = "The Consul"
                        },
                        new
                        {
                            Id = 13,
                            Code = "ISTP",
                            Description = "Bold and practical experimenters, masters of all kinds of tools.",
                            Name = "The Virtuoso"
                        },
                        new
                        {
                            Id = 14,
                            Code = "ISFP",
                            Description = "Flexible and charming artists, always ready to explore and experience something new.",
                            Name = "The Adventurer"
                        },
                        new
                        {
                            Id = 15,
                            Code = "ESTP",
                            Description = "Smart, energetic and very perceptive people, who truly enjoy living on the edge.",
                            Name = "The Entrepreneur"
                        },
                        new
                        {
                            Id = 16,
                            Code = "ESFP",
                            Description = "Spontaneous, energetic and enthusiastic people – life is never boring around them.",
                            Name = "The Entertainer"
                        });
                });

            modelBuilder.Entity("Domain.Models.MBTI_Department", b =>
                {
                    b.Property<int>("MBTI_Id")
                        .HasColumnType("integer");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.HasKey("MBTI_Id", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MBTI_Department");

                    b.HasData(
                        new
                        {
                            MBTI_Id = 2,
                            DepartmentId = new Guid("de305d54-75b4-431b-adb2-eb6b9e546013")
                        },
                        new
                        {
                            MBTI_Id = 2,
                            DepartmentId = new Guid("bb3a10db-c4d4-4b45-9d15-0c38f41e8f5f")
                        },
                        new
                        {
                            MBTI_Id = 9,
                            DepartmentId = new Guid("4c7c3b5f-2a54-42ee-8a7f-0961273cd329")
                        });
                });

            modelBuilder.Entity("Domain.Models.MBTI_Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MBTI_Exams");
                });

            modelBuilder.Entity("Domain.Models.MBTI_ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("MBTI_ExamQuestions");
                });

            modelBuilder.Entity("Domain.Models.MBTI_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("FirstAnswerType")
                        .HasColumnType("integer");

                    b.Property<string>("NameAns1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameAns2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameQuestion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SecondAnswerType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MBTI_Questions");
                });

            modelBuilder.Entity("Domain.Models.MBTI_UserRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MBTI_UserRecords");
                });

            modelBuilder.Entity("Domain.Models.Major", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Major");
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("238f27e2-fe56-4ce8-88f8-d3aa7b56f976"),
                            Content = "{\"Question\":\"What is the capital of France?\",\"ListAnswer\":[{\"Value\":\"Paris\",\"IsAnswer\":true},{\"Value\":\"London\",\"IsAnswer\":false},{\"Value\":\"Berlin\",\"IsAnswer\":false}]}",
                            IsDeleted = false,
                            TopicId = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da")
                        },
                        new
                        {
                            Id = new Guid("85e5d51b-16c7-4d0d-8f40-766a6a902698"),
                            Content = "{\"Question\":\"How many continents are there?\",\"ListAnswer\":[{\"Value\":\"7\",\"IsAnswer\":true},{\"Value\":\"5\",\"IsAnswer\":false},{\"Value\":\"6\",\"IsAnswer\":false}]}",
                            IsDeleted = false,
                            TopicId = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da")
                        },
                        new
                        {
                            Id = new Guid("3e28911a-1220-4c7f-a1c6-bcce0b74ccfe"),
                            Content = "{\"Question\":\"When was the Declaration of Independence signed?\",\"ListAnswer\":[{\"Value\":\"1776-07-04\",\"IsAnswer\":true},{\"Value\":\"1789-09-25\",\"IsAnswer\":false},{\"Value\":\"1800-03-12\",\"IsAnswer\":false}]}",
                            IsDeleted = false,
                            TopicId = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da")
                        },
                        new
                        {
                            Id = new Guid("21eb2451-53ac-44f6-9a6c-751d394a8936"),
                            Content = "{\"Question\":\"Which cities are in the United Kingdom?\",\"ListAnswer\":[{\"Value\":\"London\",\"IsAnswer\":true},{\"Value\":\"Manchester\",\"IsAnswer\":false},{\"Value\":\"Edinburgh\",\"IsAnswer\":true}]}",
                            IsDeleted = false,
                            TopicId = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da")
                        });
                });

            modelBuilder.Entity("Domain.Models.RecordDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MBTI_ExamQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("UserChoice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRecordId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MBTI_ExamQuestionId");

                    b.HasIndex("UserRecordId");

                    b.ToTable("RecordDetails");
                });

            modelBuilder.Entity("Domain.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a8c8d5f-2a54-42ee-8a7f-0961273cd625"),
                            IsDeleted = false,
                            Name = "Toán"
                        },
                        new
                        {
                            Id = new Guid("c0456f7f-1963-4598-8b7c-8f44bd7e2dbe"),
                            IsDeleted = false,
                            Name = "Ngữ Văn"
                        },
                        new
                        {
                            Id = new Guid("d6d7fa5b-6578-46c3-bcd4-98c43d6d709c"),
                            IsDeleted = false,
                            Name = "Anh Văn"
                        },
                        new
                        {
                            Id = new Guid("ffb7d37a-a980-4623-ad89-0c1e0a7de7de"),
                            IsDeleted = false,
                            Name = "Lịch Sử"
                        },
                        new
                        {
                            Id = new Guid("4cb41deb-15d9-40ba-9d20-1f3f10410cc7"),
                            IsDeleted = false,
                            Name = "Địa Lý"
                        },
                        new
                        {
                            Id = new Guid("af6197e1-8fc6-4afe-9f63-6b4f426ad502"),
                            IsDeleted = false,
                            Name = "Sinh học"
                        },
                        new
                        {
                            Id = new Guid("0141a511-2028-4a5a-b81d-4a61d98ee0a8"),
                            IsDeleted = false,
                            Name = "Hóa học"
                        },
                        new
                        {
                            Id = new Guid("00940497-7f82-493d-aac3-a56e9e92f390"),
                            IsDeleted = false,
                            Name = "Giáo dục công dân"
                        },
                        new
                        {
                            Id = new Guid("ab091cc2-6f9a-4023-8003-2ca82076f5a4"),
                            IsDeleted = false,
                            Name = "Vật Lý"
                        },
                        new
                        {
                            Id = new Guid("50051095-391a-4abf-94f2-ac3cf912f07b"),
                            IsDeleted = false,
                            Name = "Mỹ Thuật"
                        });
                });

            modelBuilder.Entity("Domain.Models.SubjectGroup", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("SubjectGroup");
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f722c143-412c-4721-bf5c-5b32a01d90da"),
                            Description = "toan dai cuong",
                            Index = 1,
                            IsDeleted = false,
                            Name = "toan dai cuong",
                            SubjectId = new Guid("6a8c8d5f-2a54-42ee-8a7f-0961273cd625")
                        },
                        new
                        {
                            Id = new Guid("25b3ba1e-240a-4a3c-96b6-c0816b0a3975"),
                            Description = "Toan hinh",
                            Index = 2,
                            IsDeleted = false,
                            Name = "toan hinh",
                            SubjectId = new Guid("6a8c8d5f-2a54-42ee-8a7f-0961273cd625")
                        });
                });

            modelBuilder.Entity("Domain.Models.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("University");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f84e78ea-4426-4728-a3f6-c41c3ed22072"),
                            Code = "FPT",
                            Description = "Trường đại học tư thục hàng đầu Việt Nam về công nghệ thông tin và truyền thông.",
                            IsDeleted = false,
                            Name = "Đại học FPT"
                        },
                        new
                        {
                            Id = new Guid("6b70b92b-4201-4611-b6bb-716a5b3c4fec"),
                            Code = "UEH",
                            Description = "Trường đại học công lập đào tạo về kinh tế, tài chính, ngân hàng hàng đầu tại Việt Nam",
                            IsDeleted = false,
                            Name = "Đại học kinh tế TPHCM"
                        },
                        new
                        {
                            Id = new Guid("0e7c3b01-d954-4986-9d9d-f48127433211"),
                            Code = "HCMUE",
                            Description = "Trường đại học công lập đào tạo sư phạm lớn nhất Việt Nam",
                            IsDeleted = false,
                            Name = "Đại học Sư phạm Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            Id = new Guid("b629e405-9aca-4c19-bbe3-f4a50d9cca62"),
                            Code = "UMP",
                            Description = "Trường đại học công lập đào tạo về y dược lớn nhất Việt Nam",
                            IsDeleted = false,
                            Name = "Đại học Y Dược Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            Id = new Guid("cf30b5ef-1a8f-472f-af90-337a5cee4c16"),
                            Code = "UAH",
                            Description = "Trường đại học công lập đào tạo về kiến trúc hàng đầu Việt Nam",
                            IsDeleted = false,
                            Name = "Đại học Kiến trúc Thành phố Hồ Chí Minh"
                        });
                });

            modelBuilder.Entity("Domain.Models.UniversityDepartment", b =>
                {
                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UniversityId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("UniversityDepartments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("HighestScore")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0b84747-fbed-43e1-9cd1-ecf2e1bd3cc0"),
                            Address = "Tran quoc toan",
                            Email = "student@gmail.com",
                            FirstName = "Nguyen",
                            HighestScore = 10,
                            IsDeleted = false,
                            LastName = "Vu",
                            PasswordHash = new byte[] { 23, 59, 15, 99, 36, 120, 226, 91, 72, 182, 172, 14, 169, 109, 167, 236, 74, 176, 156, 55, 13, 40, 200, 221, 106, 47, 49, 104, 203, 122, 178, 74, 32, 129, 186, 113, 236, 170, 171, 43, 95, 27, 2, 20, 84, 196, 216, 66, 93, 70, 9, 97, 153, 126, 209, 148, 35, 226, 208, 123, 203, 224, 159, 7 },
                            PasswordSalt = new byte[] { 231, 54, 84, 102, 72, 122, 90, 111, 50, 103, 250, 157, 128, 190, 194, 220, 124, 80, 250, 196, 12, 231, 30, 136, 230, 189, 158, 37, 102, 84, 83, 247, 68, 86, 144, 153, 136, 36, 40, 2, 142, 218, 21, 52, 252, 92, 157, 120, 122, 164, 80, 150, 74, 146, 20, 184, 35, 175, 122, 234, 140, 76, 127, 84, 100, 253, 239, 11, 7, 49, 53, 104, 119, 161, 254, 63, 100, 52, 206, 187, 52, 69, 145, 160, 146, 182, 194, 168, 167, 229, 47, 105, 146, 229, 238, 27, 25, 233, 31, 227, 1, 81, 115, 37, 223, 81, 170, 110, 162, 191, 254, 246, 214, 117, 115, 91, 112, 166, 176, 152, 32, 231, 13, 164, 202, 174, 153, 106 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = new Guid("09d2d924-8c18-4e49-bbc4-f67c0204d7af"),
                            Address = "Tran quoc toan",
                            Email = "student2@gmail.com",
                            FirstName = "Minh",
                            HighestScore = 9,
                            IsDeleted = false,
                            LastName = "Vu",
                            PasswordHash = new byte[] { 64, 155, 255, 2, 206, 206, 47, 40, 66, 225, 73, 59, 233, 198, 51, 168, 56, 78, 189, 88, 153, 171, 69, 82, 155, 255, 13, 228, 33, 165, 216, 227, 190, 212, 19, 125, 13, 23, 214, 120, 143, 183, 19, 168, 56, 207, 242, 209, 20, 138, 225, 54, 215, 209, 58, 188, 201, 136, 22, 100, 244, 92, 245, 177 },
                            PasswordSalt = new byte[] { 17, 159, 182, 15, 241, 250, 232, 151, 178, 66, 2, 197, 26, 155, 218, 43, 119, 84, 146, 211, 90, 20, 246, 210, 230, 120, 247, 179, 2, 146, 57, 227, 65, 36, 85, 64, 67, 136, 190, 2, 128, 143, 24, 108, 48, 141, 163, 190, 91, 178, 153, 6, 52, 188, 226, 86, 247, 79, 166, 96, 97, 78, 62, 20, 65, 4, 150, 103, 172, 217, 223, 136, 93, 40, 6, 116, 242, 141, 232, 203, 95, 85, 24, 14, 247, 9, 2, 53, 242, 18, 175, 234, 65, 82, 41, 141, 252, 40, 189, 30, 81, 238, 169, 110, 151, 135, 241, 167, 64, 254, 156, 35, 182, 130, 71, 90, 93, 223, 215, 126, 114, 172, 78, 150, 125, 215, 206, 194 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = new Guid("5ddbd197-9ac9-42fb-bdfe-dee7dbe35efd"),
                            Address = "Tran quoc toan",
                            Email = "student2@gmail.com",
                            FirstName = "Minh",
                            HighestScore = 6,
                            IsDeleted = false,
                            LastName = "Duc",
                            PasswordHash = new byte[] { 179, 35, 193, 210, 147, 192, 51, 231, 7, 1, 228, 143, 181, 158, 133, 149, 144, 136, 132, 141, 184, 2, 99, 30, 85, 140, 30, 72, 234, 106, 51, 23, 158, 136, 227, 94, 88, 12, 35, 102, 8, 246, 255, 103, 179, 81, 147, 33, 51, 247, 41, 238, 61, 11, 45, 202, 191, 193, 188, 182, 176, 137, 118, 199 },
                            PasswordSalt = new byte[] { 149, 115, 9, 231, 36, 128, 125, 134, 3, 87, 1, 98, 70, 133, 234, 213, 208, 53, 52, 5, 162, 116, 36, 162, 96, 220, 93, 27, 173, 243, 163, 111, 221, 8, 205, 162, 217, 228, 13, 249, 130, 234, 46, 184, 202, 232, 200, 26, 10, 12, 24, 122, 192, 77, 75, 196, 188, 162, 254, 23, 167, 133, 188, 172, 113, 46, 96, 179, 123, 246, 63, 122, 143, 234, 63, 126, 115, 22, 102, 106, 64, 214, 197, 73, 104, 41, 196, 12, 240, 13, 214, 150, 126, 63, 152, 66, 10, 207, 230, 6, 207, 38, 55, 2, 216, 209, 135, 45, 42, 174, 181, 131, 54, 40, 26, 199, 10, 203, 66, 116, 96, 132, 24, 101, 235, 174, 124, 99 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = new Guid("f2dbff0f-0ccb-4cc3-91e3-d068431af710"),
                            Address = "Tran quoc toan",
                            Email = "student3@gmail.com",
                            FirstName = "Minh",
                            HighestScore = 7,
                            IsDeleted = false,
                            LastName = "Quan",
                            PasswordHash = new byte[] { 53, 79, 213, 207, 197, 240, 130, 117, 185, 4, 122, 111, 66, 167, 60, 157, 224, 118, 128, 10, 125, 68, 209, 161, 2, 222, 104, 14, 255, 107, 217, 234, 217, 184, 185, 30, 157, 53, 153, 108, 110, 216, 252, 21, 184, 110, 122, 116, 100, 230, 229, 163, 2, 42, 148, 110, 10, 230, 75, 18, 185, 112, 36, 31 },
                            PasswordSalt = new byte[] { 221, 126, 185, 0, 156, 125, 236, 245, 240, 155, 2, 94, 158, 20, 24, 197, 35, 175, 253, 125, 85, 88, 175, 70, 27, 14, 186, 75, 103, 57, 250, 246, 250, 139, 159, 41, 231, 231, 95, 145, 242, 233, 180, 252, 226, 124, 78, 225, 189, 160, 225, 181, 187, 29, 116, 188, 199, 159, 6, 144, 49, 19, 209, 61, 236, 13, 216, 96, 112, 77, 239, 39, 239, 0, 11, 234, 247, 201, 27, 50, 32, 245, 110, 141, 171, 49, 208, 191, 157, 223, 124, 177, 88, 187, 39, 189, 240, 1, 13, 78, 58, 135, 188, 66, 151, 32, 71, 192, 15, 94, 84, 96, 215, 130, 255, 1, 233, 57, 196, 38, 81, 195, 152, 135, 18, 26, 178, 193 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student3"
                        },
                        new
                        {
                            Id = new Guid("1a022b66-8b1c-461a-be8a-ec2a7b0741e9"),
                            Address = "Tran quoc toan",
                            Email = "student4@gmail.com",
                            FirstName = "Minh",
                            HighestScore = 6,
                            IsDeleted = false,
                            LastName = "Tam",
                            PasswordHash = new byte[] { 79, 123, 145, 183, 167, 63, 146, 80, 196, 92, 255, 175, 17, 228, 239, 191, 133, 162, 157, 100, 228, 53, 107, 181, 139, 115, 177, 20, 173, 18, 213, 47, 187, 89, 143, 94, 5, 174, 18, 216, 218, 57, 141, 104, 64, 154, 111, 234, 42, 151, 13, 3, 40, 185, 49, 225, 15, 76, 104, 17, 18, 62, 207, 20 },
                            PasswordSalt = new byte[] { 249, 111, 251, 90, 203, 18, 131, 188, 21, 115, 59, 74, 144, 20, 43, 88, 196, 93, 216, 216, 156, 59, 224, 46, 95, 6, 211, 235, 1, 146, 79, 68, 250, 217, 9, 191, 20, 178, 202, 210, 130, 87, 7, 156, 155, 73, 23, 227, 133, 169, 183, 70, 67, 125, 47, 113, 58, 174, 121, 18, 246, 67, 118, 107, 249, 44, 159, 54, 232, 166, 55, 117, 35, 234, 114, 219, 210, 73, 53, 237, 207, 239, 5, 126, 85, 159, 135, 171, 43, 255, 121, 73, 99, 133, 219, 215, 195, 130, 95, 71, 25, 123, 105, 229, 60, 140, 133, 55, 239, 213, 207, 105, 142, 104, 75, 19, 199, 205, 20, 64, 52, 88, 25, 92, 162, 107, 237, 68 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student4"
                        },
                        new
                        {
                            Id = new Guid("4c5d8bb2-b66c-49e7-982b-685ed23d1be8"),
                            Address = "Tran quoc toan",
                            Email = "student5@gmail.com",
                            FirstName = "Trinh",
                            HighestScore = 5,
                            IsDeleted = false,
                            LastName = "Tam",
                            PasswordHash = new byte[] { 29, 31, 82, 178, 230, 91, 118, 79, 186, 148, 72, 25, 34, 83, 145, 19, 58, 189, 179, 190, 98, 66, 122, 48, 123, 103, 90, 215, 183, 15, 116, 201, 142, 27, 97, 11, 170, 178, 217, 6, 109, 105, 86, 212, 89, 75, 7, 71, 242, 190, 53, 126, 42, 245, 77, 186, 81, 144, 153, 76, 176, 37, 103, 143 },
                            PasswordSalt = new byte[] { 148, 167, 124, 59, 66, 10, 113, 52, 110, 47, 210, 254, 126, 9, 52, 208, 34, 71, 36, 155, 50, 169, 115, 127, 194, 234, 32, 73, 177, 10, 152, 168, 131, 174, 210, 255, 6, 61, 28, 131, 89, 209, 234, 198, 102, 96, 141, 59, 225, 119, 132, 57, 214, 40, 232, 131, 122, 33, 54, 254, 62, 223, 136, 165, 130, 251, 214, 54, 129, 216, 106, 87, 179, 127, 78, 189, 90, 130, 48, 244, 192, 147, 56, 65, 62, 233, 128, 37, 234, 236, 123, 225, 5, 96, 153, 245, 213, 36, 100, 124, 244, 30, 176, 68, 237, 61, 247, 64, 107, 10, 112, 193, 160, 22, 171, 95, 198, 32, 32, 144, 200, 41, 75, 191, 112, 192, 159, 3 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student5"
                        },
                        new
                        {
                            Id = new Guid("324ed66e-e8de-4710-a139-18c50b442945"),
                            Address = "Tran quoc toan",
                            Email = "student6@gmail.com",
                            FirstName = "Van",
                            HighestScore = 4,
                            IsDeleted = false,
                            LastName = "Ba",
                            PasswordHash = new byte[] { 210, 159, 122, 18, 153, 24, 73, 50, 217, 10, 195, 185, 79, 72, 152, 253, 254, 151, 166, 80, 171, 233, 217, 50, 70, 121, 149, 210, 132, 221, 50, 46, 111, 166, 152, 134, 149, 127, 14, 225, 196, 96, 141, 5, 140, 255, 155, 246, 199, 78, 65, 50, 165, 81, 139, 102, 54, 113, 202, 239, 6, 139, 185, 56 },
                            PasswordSalt = new byte[] { 123, 166, 104, 89, 213, 76, 56, 199, 165, 241, 246, 241, 114, 36, 49, 68, 94, 186, 251, 26, 229, 42, 13, 31, 236, 211, 57, 3, 255, 57, 47, 3, 211, 213, 200, 81, 174, 37, 158, 120, 101, 147, 60, 246, 228, 97, 97, 40, 248, 81, 198, 105, 110, 30, 109, 7, 133, 176, 30, 97, 109, 253, 7, 2, 38, 195, 159, 225, 13, 240, 34, 106, 13, 1, 108, 92, 9, 116, 54, 184, 190, 235, 126, 225, 172, 10, 6, 91, 107, 73, 93, 227, 45, 112, 110, 123, 177, 191, 159, 163, 19, 97, 140, 137, 206, 188, 203, 77, 147, 177, 73, 110, 39, 89, 190, 96, 98, 15, 70, 186, 42, 110, 200, 99, 158, 206, 246, 151 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student6"
                        },
                        new
                        {
                            Id = new Guid("d406be20-d364-43c5-84bf-4d3e3be43ae0"),
                            Address = "Tran quoc toan",
                            Email = "student7@gmail.com",
                            FirstName = "Van",
                            HighestScore = 3,
                            IsDeleted = false,
                            LastName = "Hung",
                            PasswordHash = new byte[] { 61, 26, 52, 153, 183, 242, 246, 205, 189, 80, 251, 41, 199, 63, 213, 187, 195, 154, 22, 67, 93, 221, 45, 229, 112, 196, 76, 41, 50, 66, 176, 150, 8, 193, 174, 134, 226, 7, 64, 193, 1, 1, 81, 195, 111, 22, 106, 72, 172, 136, 220, 123, 96, 17, 185, 196, 15, 118, 33, 198, 164, 148, 184, 23 },
                            PasswordSalt = new byte[] { 112, 187, 31, 49, 28, 92, 140, 39, 127, 31, 135, 17, 232, 32, 203, 225, 198, 125, 168, 21, 120, 11, 135, 42, 100, 193, 144, 64, 79, 62, 170, 50, 142, 35, 146, 255, 31, 53, 102, 78, 117, 104, 71, 22, 163, 200, 233, 68, 231, 131, 221, 215, 81, 101, 154, 231, 182, 29, 145, 141, 235, 106, 52, 215, 130, 249, 129, 168, 243, 184, 38, 234, 143, 31, 23, 1, 248, 65, 198, 47, 70, 59, 171, 241, 131, 84, 189, 46, 170, 157, 40, 75, 144, 226, 95, 10, 200, 100, 102, 93, 227, 122, 250, 205, 63, 3, 32, 147, 234, 204, 66, 144, 235, 95, 3, 90, 94, 33, 52, 176, 171, 178, 208, 95, 89, 6, 33, 122 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student7"
                        },
                        new
                        {
                            Id = new Guid("312f4251-1f9f-4f80-b2ad-968fc339b134"),
                            Address = "Tran quoc toan",
                            Email = "student8@gmail.com",
                            FirstName = "Ly",
                            HighestScore = 2,
                            IsDeleted = false,
                            LastName = "Hung",
                            PasswordHash = new byte[] { 202, 161, 207, 60, 7, 131, 17, 219, 203, 202, 30, 25, 229, 155, 47, 201, 140, 98, 147, 120, 219, 235, 164, 184, 2, 48, 188, 208, 239, 10, 171, 26, 160, 150, 0, 21, 56, 185, 112, 24, 229, 249, 75, 219, 28, 243, 40, 62, 224, 215, 3, 151, 176, 81, 30, 64, 2, 128, 51, 249, 198, 83, 196, 165 },
                            PasswordSalt = new byte[] { 0, 60, 204, 28, 96, 218, 158, 99, 121, 179, 160, 5, 243, 123, 27, 252, 208, 102, 176, 153, 58, 147, 59, 239, 87, 63, 98, 243, 29, 234, 5, 106, 104, 94, 150, 213, 123, 91, 216, 43, 53, 241, 23, 24, 20, 226, 148, 47, 205, 227, 103, 226, 243, 26, 93, 184, 48, 195, 174, 167, 30, 240, 23, 98, 61, 84, 55, 13, 113, 43, 127, 92, 240, 114, 197, 194, 45, 92, 76, 181, 19, 72, 163, 100, 183, 138, 156, 120, 241, 198, 204, 127, 161, 147, 11, 81, 7, 215, 237, 82, 31, 8, 41, 241, 95, 198, 241, 172, 92, 167, 54, 139, 147, 29, 34, 213, 16, 211, 96, 229, 72, 85, 40, 37, 161, 54, 250, 82 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student8"
                        },
                        new
                        {
                            Id = new Guid("84a7c64a-feed-4fb2-8b1e-24e10aa382b2"),
                            Address = "Tran quoc toan",
                            Email = "student9@gmail.com",
                            FirstName = "Ly",
                            HighestScore = 1,
                            IsDeleted = false,
                            LastName = "Lac",
                            PasswordHash = new byte[] { 95, 192, 237, 73, 176, 156, 99, 173, 106, 242, 26, 111, 73, 46, 39, 16, 106, 163, 204, 113, 19, 26, 134, 191, 178, 200, 94, 60, 71, 71, 161, 168, 18, 35, 242, 114, 0, 57, 105, 168, 52, 75, 64, 119, 200, 94, 249, 100, 75, 214, 250, 98, 112, 48, 96, 162, 200, 60, 164, 13, 149, 179, 66, 255 },
                            PasswordSalt = new byte[] { 81, 168, 150, 75, 103, 154, 108, 211, 27, 152, 168, 104, 232, 255, 50, 64, 47, 123, 159, 153, 16, 164, 163, 125, 37, 169, 112, 111, 100, 74, 149, 32, 207, 156, 57, 152, 27, 44, 21, 253, 109, 34, 175, 31, 164, 83, 2, 221, 145, 207, 49, 35, 143, 12, 218, 52, 129, 12, 170, 23, 59, 108, 250, 173, 66, 205, 21, 218, 14, 200, 209, 225, 64, 49, 107, 66, 165, 120, 91, 171, 153, 23, 243, 76, 47, 161, 139, 236, 51, 103, 74, 36, 117, 150, 204, 240, 138, 10, 236, 49, 186, 159, 172, 126, 142, 134, 209, 94, 148, 42, 59, 48, 113, 193, 133, 159, 204, 97, 186, 183, 138, 20, 39, 84, 225, 246, 236, 145 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student9"
                        },
                        new
                        {
                            Id = new Guid("cb235a17-fd24-48cf-ba34-ac5ac698a832"),
                            Address = "Tran quoc toan",
                            Email = "student10@gmail.com",
                            FirstName = "Tran",
                            HighestScore = 9,
                            IsDeleted = false,
                            LastName = "Hong",
                            PasswordHash = new byte[] { 240, 106, 29, 211, 221, 41, 240, 137, 126, 47, 28, 202, 113, 60, 1, 250, 166, 0, 146, 57, 215, 209, 16, 235, 6, 53, 39, 207, 121, 217, 163, 135, 59, 186, 114, 79, 108, 35, 30, 53, 2, 195, 115, 89, 154, 171, 207, 238, 83, 220, 129, 192, 96, 29, 16, 249, 192, 104, 255, 128, 91, 117, 181, 228 },
                            PasswordSalt = new byte[] { 220, 61, 155, 161, 78, 201, 101, 54, 140, 213, 132, 199, 129, 63, 212, 100, 253, 3, 112, 16, 177, 113, 42, 245, 154, 17, 123, 179, 127, 3, 63, 171, 194, 130, 155, 210, 130, 69, 85, 113, 209, 230, 214, 102, 132, 42, 187, 80, 110, 100, 125, 107, 148, 228, 33, 84, 224, 168, 27, 26, 68, 11, 65, 82, 247, 89, 49, 39, 102, 241, 32, 6, 120, 170, 108, 71, 204, 55, 111, 250, 186, 236, 39, 51, 81, 111, 26, 17, 118, 129, 112, 175, 73, 154, 181, 149, 79, 60, 236, 203, 3, 171, 6, 38, 3, 129, 155, 67, 157, 10, 131, 89, 39, 184, 93, 129, 108, 252, 37, 225, 130, 146, 136, 115, 243, 16, 214, 223 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student10"
                        },
                        new
                        {
                            Id = new Guid("6d6ad990-1ff2-445b-8496-d766048e25cf"),
                            Address = "Tran quoc toan",
                            Email = "student11@gmail.com",
                            FirstName = "Nhan",
                            HighestScore = 10,
                            IsDeleted = false,
                            LastName = "Hong",
                            PasswordHash = new byte[] { 63, 76, 160, 108, 95, 148, 143, 53, 44, 149, 168, 93, 190, 237, 9, 184, 91, 64, 212, 111, 201, 79, 139, 246, 179, 135, 42, 103, 133, 189, 224, 121, 136, 11, 108, 219, 225, 146, 82, 25, 171, 181, 215, 137, 9, 128, 14, 110, 245, 240, 81, 5, 24, 130, 215, 180, 167, 38, 162, 97, 181, 142, 12, 141 },
                            PasswordSalt = new byte[] { 77, 143, 101, 94, 18, 84, 246, 19, 192, 248, 78, 86, 184, 17, 103, 215, 227, 164, 43, 189, 147, 162, 211, 80, 246, 235, 126, 252, 219, 97, 82, 98, 154, 157, 205, 208, 120, 18, 215, 90, 60, 9, 64, 102, 196, 111, 178, 154, 143, 155, 167, 2, 176, 197, 34, 35, 197, 117, 50, 147, 28, 180, 134, 99, 122, 102, 155, 146, 46, 6, 195, 155, 219, 80, 44, 81, 140, 70, 53, 6, 72, 183, 102, 213, 221, 134, 110, 153, 16, 79, 22, 119, 102, 247, 31, 70, 242, 93, 15, 150, 115, 189, 48, 227, 159, 167, 34, 92, 94, 75, 130, 210, 216, 61, 5, 216, 151, 238, 196, 57, 236, 203, 161, 252, 240, 195, 205, 245 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student11"
                        },
                        new
                        {
                            Id = new Guid("e798134f-8d1b-41aa-98c1-c8914240366d"),
                            Address = "Tran quoc toan",
                            Email = "student12@gmail.com",
                            FirstName = "Nhan",
                            HighestScore = 7,
                            IsDeleted = false,
                            LastName = "Chia",
                            PasswordHash = new byte[] { 97, 94, 147, 242, 103, 131, 46, 18, 223, 102, 68, 65, 179, 108, 117, 32, 228, 199, 238, 76, 157, 197, 224, 20, 239, 31, 164, 224, 205, 251, 12, 12, 46, 189, 104, 114, 229, 109, 11, 130, 3, 149, 54, 19, 86, 192, 217, 152, 159, 189, 151, 135, 240, 65, 169, 187, 7, 138, 87, 158, 180, 147, 142, 119 },
                            PasswordSalt = new byte[] { 216, 86, 8, 149, 199, 91, 65, 173, 87, 190, 94, 13, 21, 88, 240, 82, 43, 178, 35, 13, 65, 113, 249, 159, 29, 150, 127, 117, 68, 74, 171, 57, 147, 185, 196, 103, 230, 116, 171, 46, 244, 42, 26, 212, 224, 127, 252, 105, 103, 145, 239, 179, 132, 123, 194, 80, 141, 42, 17, 227, 119, 51, 27, 101, 127, 141, 100, 76, 111, 83, 222, 66, 118, 5, 215, 196, 150, 181, 217, 41, 242, 235, 7, 197, 46, 9, 0, 88, 195, 217, 138, 3, 118, 110, 142, 227, 172, 92, 67, 24, 252, 141, 76, 83, 227, 226, 191, 28, 170, 111, 9, 8, 161, 108, 12, 15, 15, 126, 80, 111, 195, 4, 189, 64, 250, 88, 56, 180 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student12"
                        },
                        new
                        {
                            Id = new Guid("8f744e72-da12-4038-a54e-7512a0ada884"),
                            Address = "Tran quoc toan",
                            Email = "student13@gmail.com",
                            FirstName = "Huan",
                            HighestScore = 8,
                            IsDeleted = false,
                            LastName = "Hoe",
                            PasswordHash = new byte[] { 64, 10, 41, 53, 233, 73, 253, 223, 246, 16, 77, 139, 77, 238, 230, 179, 203, 37, 233, 51, 149, 17, 180, 211, 130, 114, 139, 67, 157, 201, 251, 194, 114, 199, 71, 27, 161, 125, 191, 111, 148, 24, 226, 142, 200, 103, 180, 171, 255, 110, 14, 216, 243, 110, 155, 167, 244, 157, 140, 167, 236, 215, 32, 113 },
                            PasswordSalt = new byte[] { 76, 47, 234, 16, 63, 200, 86, 212, 253, 202, 196, 220, 104, 151, 173, 43, 159, 197, 133, 69, 5, 212, 247, 28, 79, 215, 233, 22, 159, 168, 160, 228, 177, 47, 254, 20, 232, 234, 169, 183, 253, 18, 17, 105, 98, 9, 158, 74, 245, 122, 220, 56, 173, 229, 220, 42, 55, 195, 235, 255, 65, 152, 137, 89, 163, 71, 110, 95, 107, 251, 72, 119, 226, 170, 55, 232, 105, 240, 148, 46, 197, 178, 219, 72, 197, 123, 173, 114, 98, 127, 147, 195, 209, 234, 107, 254, 190, 75, 149, 5, 5, 26, 215, 90, 100, 90, 131, 33, 216, 212, 97, 254, 175, 78, 169, 62, 99, 209, 154, 121, 218, 223, 97, 247, 91, 238, 84, 107 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student13"
                        },
                        new
                        {
                            Id = new Guid("24d15338-310e-4d3d-9e39-86444fc0ddec"),
                            Address = "Tran quoc toan",
                            Email = "student14@gmail.com",
                            FirstName = "Cook",
                            HighestScore = 1,
                            IsDeleted = false,
                            LastName = "Lee",
                            PasswordHash = new byte[] { 130, 177, 87, 34, 197, 170, 84, 105, 1, 97, 122, 212, 190, 130, 95, 149, 177, 62, 1, 6, 101, 96, 172, 113, 112, 54, 104, 124, 187, 19, 98, 204, 29, 126, 110, 254, 168, 225, 153, 210, 4, 166, 181, 16, 83, 195, 229, 197, 7, 114, 112, 240, 215, 101, 97, 76, 188, 12, 67, 110, 159, 4, 212, 82 },
                            PasswordSalt = new byte[] { 145, 30, 137, 91, 49, 52, 103, 152, 28, 14, 241, 178, 54, 37, 176, 114, 78, 97, 168, 230, 212, 27, 58, 185, 222, 132, 99, 135, 217, 188, 226, 102, 221, 54, 115, 59, 84, 159, 224, 13, 16, 35, 68, 100, 44, 244, 235, 9, 146, 25, 194, 215, 178, 78, 246, 123, 203, 33, 213, 21, 10, 174, 218, 72, 80, 3, 88, 170, 206, 130, 44, 219, 65, 97, 83, 184, 239, 115, 128, 151, 159, 14, 204, 5, 74, 103, 197, 250, 227, 181, 131, 89, 180, 99, 184, 12, 169, 39, 141, 71, 15, 154, 59, 191, 154, 30, 122, 58, 235, 86, 132, 128, 106, 170, 19, 201, 87, 140, 130, 137, 180, 254, 241, 177, 253, 115, 144, 192 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student14"
                        },
                        new
                        {
                            Id = new Guid("1eff27be-f2ea-4df7-93a5-33c7ba5e2d98"),
                            Address = "Tran quoc toan",
                            Email = "student15@gmail.com",
                            FirstName = "Trinh",
                            HighestScore = 1,
                            IsDeleted = false,
                            LastName = "Quan",
                            PasswordHash = new byte[] { 141, 149, 81, 176, 191, 161, 121, 247, 248, 137, 109, 220, 123, 80, 238, 70, 214, 135, 78, 246, 159, 88, 157, 73, 56, 153, 91, 83, 190, 52, 210, 98, 14, 96, 74, 155, 213, 188, 185, 158, 248, 133, 187, 84, 195, 15, 70, 107, 155, 48, 51, 108, 254, 85, 152, 222, 41, 181, 55, 55, 189, 103, 110, 10 },
                            PasswordSalt = new byte[] { 45, 116, 233, 17, 96, 212, 83, 154, 7, 189, 207, 74, 166, 54, 181, 27, 123, 211, 145, 61, 92, 204, 19, 222, 54, 175, 22, 54, 44, 117, 186, 38, 14, 33, 233, 15, 133, 33, 19, 29, 17, 33, 6, 48, 79, 232, 8, 197, 77, 155, 43, 33, 31, 200, 26, 72, 132, 221, 175, 15, 75, 48, 243, 88, 4, 157, 244, 160, 29, 215, 79, 89, 160, 186, 112, 233, 31, 83, 146, 4, 85, 53, 100, 48, 218, 238, 75, 133, 175, 254, 188, 227, 10, 112, 76, 168, 14, 131, 61, 125, 160, 124, 222, 26, 204, 40, 91, 101, 202, 14, 200, 177, 200, 191, 107, 10, 21, 7, 99, 201, 133, 180, 6, 9, 79, 227, 67, 74 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student15"
                        },
                        new
                        {
                            Id = new Guid("99c5faa8-d3fe-45b3-a871-86117ef93111"),
                            Address = "Tran quoc toan",
                            Email = "student16@gmail.com",
                            FirstName = "Trinh",
                            HighestScore = 5,
                            IsDeleted = false,
                            LastName = "Trong",
                            PasswordHash = new byte[] { 188, 210, 113, 86, 59, 7, 218, 99, 242, 248, 141, 115, 38, 6, 195, 59, 94, 149, 230, 75, 78, 165, 217, 62, 127, 190, 3, 56, 26, 202, 235, 183, 17, 114, 213, 70, 239, 238, 85, 120, 2, 131, 65, 147, 142, 104, 167, 162, 31, 62, 254, 239, 43, 152, 69, 67, 206, 233, 28, 186, 219, 119, 25, 63 },
                            PasswordSalt = new byte[] { 95, 13, 55, 26, 207, 222, 113, 12, 164, 204, 225, 40, 180, 195, 30, 175, 16, 179, 150, 191, 77, 99, 249, 145, 219, 195, 87, 78, 57, 177, 100, 227, 202, 168, 44, 89, 183, 23, 106, 62, 55, 204, 249, 246, 57, 35, 104, 188, 156, 34, 36, 158, 61, 176, 114, 254, 108, 136, 250, 170, 151, 55, 151, 123, 92, 74, 36, 240, 98, 56, 58, 50, 202, 96, 222, 160, 119, 30, 150, 110, 51, 158, 121, 237, 27, 168, 19, 176, 152, 171, 191, 46, 89, 185, 169, 239, 112, 101, 135, 99, 132, 14, 213, 42, 22, 40, 174, 57, 3, 218, 126, 138, 172, 135, 206, 32, 195, 151, 23, 97, 25, 45, 192, 223, 112, 115, 142, 43 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student16"
                        },
                        new
                        {
                            Id = new Guid("5b670b4c-a8dc-4cca-8d2b-0bb45d69a702"),
                            Address = "Tran quoc toan",
                            Email = "student17@gmail.com",
                            FirstName = "Kim",
                            HighestScore = 1,
                            IsDeleted = false,
                            LastName = "Trong",
                            PasswordHash = new byte[] { 75, 5, 195, 188, 155, 195, 254, 113, 196, 87, 63, 43, 162, 101, 70, 97, 104, 238, 91, 62, 201, 168, 162, 77, 73, 95, 52, 142, 223, 11, 129, 255, 171, 213, 195, 61, 131, 230, 167, 126, 118, 105, 33, 22, 59, 158, 38, 54, 218, 69, 5, 243, 212, 96, 119, 62, 240, 220, 110, 150, 106, 191, 191, 0 },
                            PasswordSalt = new byte[] { 40, 0, 139, 213, 42, 184, 204, 221, 89, 61, 65, 47, 98, 54, 39, 191, 194, 249, 138, 207, 223, 48, 16, 218, 80, 173, 103, 136, 192, 97, 88, 3, 69, 200, 83, 122, 179, 242, 238, 58, 221, 88, 230, 1, 90, 216, 50, 70, 187, 211, 248, 227, 210, 237, 170, 189, 252, 74, 157, 38, 114, 194, 31, 26, 27, 232, 191, 0, 216, 165, 59, 99, 78, 254, 39, 74, 138, 220, 70, 150, 96, 144, 149, 92, 138, 107, 238, 105, 195, 191, 172, 43, 234, 88, 217, 147, 227, 215, 243, 57, 84, 133, 193, 156, 240, 81, 250, 127, 94, 75, 48, 220, 187, 129, 126, 239, 154, 166, 146, 254, 254, 112, 115, 62, 251, 161, 91, 48 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student17"
                        },
                        new
                        {
                            Id = new Guid("c30d316f-9c93-42c9-8e72-0b3efa896192"),
                            Address = "Tran quoc toan",
                            Email = "student18@gmail.com",
                            FirstName = "Kim",
                            HighestScore = 10,
                            IsDeleted = false,
                            LastName = "Ly",
                            PasswordHash = new byte[] { 37, 16, 19, 163, 156, 29, 198, 145, 192, 188, 99, 50, 160, 208, 31, 252, 86, 255, 196, 133, 219, 56, 45, 99, 2, 82, 224, 211, 80, 199, 147, 236, 16, 197, 167, 104, 48, 223, 32, 247, 120, 248, 63, 175, 38, 35, 44, 62, 90, 228, 57, 200, 15, 160, 130, 123, 169, 91, 167, 98, 42, 137, 21, 25 },
                            PasswordSalt = new byte[] { 249, 228, 250, 35, 171, 245, 193, 249, 53, 230, 89, 176, 176, 24, 201, 55, 33, 215, 74, 224, 222, 209, 10, 149, 60, 67, 211, 50, 4, 128, 89, 11, 50, 164, 231, 174, 65, 219, 13, 158, 149, 50, 40, 205, 254, 41, 114, 171, 91, 239, 102, 186, 88, 178, 1, 78, 224, 165, 77, 228, 39, 63, 112, 181, 65, 155, 89, 195, 167, 35, 241, 191, 89, 241, 26, 203, 160, 183, 123, 191, 168, 7, 90, 80, 133, 168, 202, 160, 40, 18, 225, 143, 141, 181, 12, 158, 58, 89, 71, 134, 1, 45, 225, 85, 77, 207, 156, 60, 234, 249, 29, 79, 60, 172, 85, 21, 21, 5, 38, 55, 37, 122, 177, 220, 177, 75, 173, 57 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student18"
                        },
                        new
                        {
                            Id = new Guid("666bc14a-4078-4619-85f1-bc63033c556f"),
                            Address = "Tran quoc toan",
                            Email = "student19@gmail.com",
                            FirstName = "Cach",
                            HighestScore = 2,
                            IsDeleted = false,
                            LastName = "Ly",
                            PasswordHash = new byte[] { 164, 49, 238, 58, 212, 170, 141, 137, 254, 1, 46, 207, 212, 109, 81, 39, 148, 113, 179, 55, 179, 243, 33, 61, 175, 80, 99, 107, 206, 246, 37, 24, 173, 130, 165, 172, 77, 251, 194, 167, 137, 162, 98, 252, 76, 64, 8, 17, 5, 47, 224, 176, 62, 198, 213, 249, 102, 15, 73, 25, 29, 76, 185, 79 },
                            PasswordSalt = new byte[] { 41, 224, 249, 126, 204, 165, 7, 106, 177, 69, 183, 191, 229, 43, 234, 146, 211, 193, 100, 153, 107, 37, 245, 60, 50, 7, 55, 74, 232, 132, 62, 197, 164, 113, 169, 11, 17, 125, 45, 65, 6, 0, 114, 75, 199, 89, 67, 7, 221, 133, 48, 22, 126, 42, 165, 102, 235, 13, 126, 11, 252, 83, 213, 94, 105, 160, 82, 69, 215, 84, 253, 98, 91, 99, 227, 6, 247, 194, 163, 7, 146, 160, 171, 205, 29, 120, 234, 7, 34, 102, 100, 131, 115, 217, 28, 191, 113, 131, 233, 253, 56, 54, 72, 21, 0, 167, 69, 156, 26, 39, 116, 56, 31, 187, 200, 97, 201, 8, 181, 165, 212, 27, 184, 2, 62, 179, 104, 13 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student19"
                        },
                        new
                        {
                            Id = new Guid("96e0097f-ce73-4950-8ee2-89b313581154"),
                            Address = "Tran quoc toan",
                            Email = "student20@gmail.com",
                            FirstName = "Biet",
                            HighestScore = 3,
                            IsDeleted = false,
                            LastName = "Ly",
                            PasswordHash = new byte[] { 227, 201, 90, 236, 115, 248, 181, 190, 55, 96, 19, 139, 171, 222, 209, 123, 232, 101, 111, 168, 23, 208, 199, 110, 71, 115, 33, 121, 202, 195, 185, 222, 137, 206, 141, 122, 18, 148, 49, 82, 129, 19, 53, 120, 196, 205, 82, 201, 200, 12, 172, 170, 6, 200, 34, 5, 252, 166, 37, 40, 1, 6, 66, 46 },
                            PasswordSalt = new byte[] { 31, 226, 37, 99, 46, 71, 154, 9, 176, 154, 158, 36, 131, 17, 28, 31, 245, 39, 242, 71, 161, 252, 123, 80, 20, 49, 137, 35, 118, 53, 178, 13, 225, 46, 34, 154, 130, 200, 10, 219, 82, 172, 136, 136, 240, 146, 80, 120, 17, 195, 68, 224, 81, 123, 201, 161, 238, 179, 116, 178, 250, 39, 141, 45, 245, 63, 140, 179, 49, 17, 92, 218, 139, 167, 150, 26, 62, 118, 118, 199, 77, 192, 39, 180, 75, 122, 125, 118, 76, 145, 11, 224, 42, 131, 158, 5, 207, 111, 110, 159, 53, 206, 53, 50, 103, 167, 240, 72, 140, 74, 25, 250, 79, 127, 64, 231, 224, 125, 131, 4, 9, 228, 231, 74, 237, 63, 27, 86 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student20"
                        },
                        new
                        {
                            Id = new Guid("c5eacfa9-ec87-4150-bedc-ca141458b5a3"),
                            Address = "Tran quoc toan",
                            Email = "student21@gmail.com",
                            FirstName = "Bien",
                            HighestScore = 4,
                            IsDeleted = false,
                            LastName = "Ly",
                            PasswordHash = new byte[] { 91, 105, 99, 253, 93, 163, 158, 113, 7, 184, 162, 199, 178, 118, 253, 100, 26, 207, 84, 178, 102, 166, 225, 92, 194, 220, 64, 7, 71, 251, 6, 184, 239, 245, 95, 201, 229, 33, 14, 208, 86, 102, 168, 95, 2, 1, 200, 66, 134, 97, 147, 239, 105, 64, 153, 205, 181, 134, 20, 165, 99, 102, 37, 70 },
                            PasswordSalt = new byte[] { 11, 62, 61, 76, 240, 126, 32, 189, 201, 11, 226, 14, 52, 235, 182, 84, 201, 24, 34, 245, 207, 55, 229, 35, 164, 189, 246, 10, 18, 155, 193, 64, 55, 198, 99, 242, 59, 28, 61, 249, 85, 54, 8, 29, 21, 234, 232, 179, 250, 21, 221, 35, 5, 116, 74, 56, 6, 127, 110, 20, 33, 194, 63, 91, 229, 127, 222, 191, 17, 195, 37, 141, 161, 90, 184, 84, 83, 166, 144, 165, 3, 103, 190, 2, 105, 162, 137, 62, 70, 103, 101, 46, 229, 50, 203, 36, 197, 3, 34, 83, 94, 221, 65, 220, 123, 33, 44, 162, 18, 123, 100, 53, 130, 43, 145, 82, 129, 172, 239, 127, 138, 176, 36, 203, 130, 206, 114, 0 },
                            PhoneNumber = "1234567890",
                            Role = 1,
                            UserName = "student21"
                        },
                        new
                        {
                            Id = new Guid("a6be20e2-5927-4cce-bed4-258f919f82e6"),
                            Address = "tran quoc toan",
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            IsDeleted = false,
                            LastName = "admin",
                            PasswordHash = new byte[] { 246, 32, 238, 251, 92, 137, 204, 73, 231, 211, 182, 252, 94, 51, 19, 137, 19, 56, 80, 116, 8, 36, 7, 227, 19, 29, 161, 154, 181, 185, 92, 248, 190, 217, 113, 245, 45, 128, 115, 103, 223, 237, 59, 139, 226, 33, 142, 33, 17, 216, 57, 81, 19, 151, 106, 19, 76, 160, 161, 206, 123, 40, 71, 93 },
                            PasswordSalt = new byte[] { 205, 126, 222, 214, 193, 232, 26, 98, 132, 238, 147, 128, 139, 86, 80, 120, 10, 202, 201, 203, 205, 201, 93, 61, 85, 98, 71, 0, 44, 254, 192, 19, 87, 109, 225, 124, 94, 246, 117, 170, 185, 91, 225, 101, 221, 127, 136, 163, 175, 153, 35, 82, 63, 208, 245, 251, 72, 124, 208, 93, 164, 194, 77, 85, 128, 199, 157, 240, 119, 240, 155, 65, 30, 248, 188, 242, 109, 163, 245, 130, 122, 142, 204, 44, 191, 65, 141, 206, 157, 218, 110, 60, 10, 251, 73, 230, 189, 237, 245, 148, 64, 199, 159, 118, 149, 194, 19, 24, 64, 233, 165, 27, 165, 244, 74, 192, 162, 245, 133, 19, 173, 96, 210, 236, 212, 59, 122, 132 },
                            PhoneNumber = "1234567890",
                            Role = 0,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Models.Attempt", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Attempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.AttemptDetail", b =>
                {
                    b.HasOne("Domain.Models.Attempt", "Attempt")
                        .WithMany("AttemptDetails")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ExaminationQuestion", "ExaminationQuestion")
                        .WithMany("AttemptDetails")
                        .HasForeignKey("ExaminationQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("ExaminationQuestion");
                });

            modelBuilder.Entity("Domain.Models.ExaminationQuestion", b =>
                {
                    b.HasOne("Domain.Models.Examination", "Examination")
                        .WithMany("ExaminationQuestions")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Question", "Question")
                        .WithMany("ExaminationQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Models.GroupDepartment", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("GroupDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupDepartments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.Models.MBTI_Department", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("MBTI_Departments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.MBTI", "MBTI")
                        .WithMany("MBTI_Departments")
                        .HasForeignKey("MBTI_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("MBTI");
                });

            modelBuilder.Entity("Domain.Models.MBTI_ExamQuestion", b =>
                {
                    b.HasOne("Domain.Models.MBTI_Exam", "MBTI_Exam")
                        .WithMany("MBTI_ExamDetails")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.MBTI_Question", "MBTI_Question")
                        .WithMany("MBTI_ExamDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MBTI_Exam");

                    b.Navigation("MBTI_Question");
                });

            modelBuilder.Entity("Domain.Models.MBTI_UserRecord", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("MBTI_UserRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Major", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Majors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.HasOne("Domain.Models.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Domain.Models.RecordDetail", b =>
                {
                    b.HasOne("Domain.Models.MBTI_ExamQuestion", "MBTI_ExamQuestion")
                        .WithMany("RecordDetails")
                        .HasForeignKey("MBTI_ExamQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.MBTI_UserRecord", "MBTI_UserRecord")
                        .WithMany("RecordDetails")
                        .HasForeignKey("UserRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MBTI_ExamQuestion");

                    b.Navigation("MBTI_UserRecord");
                });

            modelBuilder.Entity("Domain.Models.SubjectGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.HasOne("Domain.Models.Subject", "Subject")
                        .WithMany("Topics")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Models.UniversityDepartment", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("UniversityDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.University", "University")
                        .WithMany("UniversityDepartments")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.Models.Attempt", b =>
                {
                    b.Navigation("AttemptDetails");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("GroupDepartments");

                    b.Navigation("MBTI_Departments");

                    b.Navigation("Majors");

                    b.Navigation("UniversityDepartments");
                });

            modelBuilder.Entity("Domain.Models.Examination", b =>
                {
                    b.Navigation("ExaminationQuestions");
                });

            modelBuilder.Entity("Domain.Models.ExaminationQuestion", b =>
                {
                    b.Navigation("AttemptDetails");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Navigation("GroupDepartments");

                    b.Navigation("SubjectGroups");
                });

            modelBuilder.Entity("Domain.Models.MBTI", b =>
                {
                    b.Navigation("MBTI_Departments");
                });

            modelBuilder.Entity("Domain.Models.MBTI_Exam", b =>
                {
                    b.Navigation("MBTI_ExamDetails");
                });

            modelBuilder.Entity("Domain.Models.MBTI_ExamQuestion", b =>
                {
                    b.Navigation("RecordDetails");
                });

            modelBuilder.Entity("Domain.Models.MBTI_Question", b =>
                {
                    b.Navigation("MBTI_ExamDetails");
                });

            modelBuilder.Entity("Domain.Models.MBTI_UserRecord", b =>
                {
                    b.Navigation("RecordDetails");
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.Navigation("ExaminationQuestions");
                });

            modelBuilder.Entity("Domain.Models.Subject", b =>
                {
                    b.Navigation("SubjectGroups");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Models.University", b =>
                {
                    b.Navigation("UniversityDepartments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("MBTI_UserRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
